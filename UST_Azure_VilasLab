

----------------------------------------------------------------
Lab1: 
Setup budget 

Cost management 
	Budget 
	D:\PraiseTheLord\HSBGInfotech\Azure\104

	
----------------------------------------------------------------
"Azure Active Directory (Azure AD)/ Azure Entra ID Basics
----------------------------------------------------------------
https://azure.microsoft.com/en-us/pricing/free-services
https://www.apps4rent.com/microsoft-entra-id-free-vs-p1-vs-p2-vs-governance.html
https://www.microsoft.com/en-in/security/business/microsoft-entra-pricing


Here's a hierarchical way to visualize these concepts:

Azure Account
└──> Azure Tenant (Organization)
    └──> Azure Subscription(s) (Billing & Policy Boundary)
        └──> Resource Group(s) (Logical Container for Resources)
            └──> Azure Resources (VMs, Storage Accounts, Databases, etc.)
			
lab: 			
Enable P1 or P2 
	Search 
		Roles and Administration 
			Small text link on top. -> Click 
			
			
			
		
----------------------------------------------------------------
Users, Groups, and Roles
----------------------------------------------------------------
User 
	Person 
	App - Managed Identity 
	

Lab: 
https://github.com/MicrosoftLearning/AZ-104-MicrosoftAzureAdministrator/blob/master/Instructions/Labs/LAB_01-Manage_Entra_ID_Identities.md		
----------------------------------------------------------------
Authentication vs. Authorization
----------------------------------------------------------------
----------------------------------------------------------------
Azure AD Identity Protection
----------------------------------------------------------------
----------------------------------------------------------------
Multi-Factor Authentication (MFA)
----------------------------------------------------------------
----------------------------------------------------------------
Conditional Access Policies
----------------------------------------------------------------
----------------------------------------------------------------
Role-Based Access Control (RBAC)
----------------------------------------------------------------
----------------------------------------------------------------
Built-in Roles vs. Custom Roles
----------------------------------------------------------------
----------------------------------------------------------------
Assigning Permissions
----------------------------------------------------------------
----------------------------------------------------------------

I. Azure Active Directory (Azure AD) / Azure Entra ID Basics
----------------------------------------------------------------
----------------------------------------------------------------

Introduction to Azure AD/Entra ID
----------------------------------------------------------------
----------------------------------------------------------------
What is a Directory Service?
----------------------------------------------------------------
----------------------------------------------------------------
Cloud-based Identity and Access Management
----------------------------------------------------------------
----------------------------------------------------------------
Tenants, Domains, and Subscriptions
----------------------------------------------------------------
----------------------------------------------------------------
Navigating the Azure AD/Entra ID Portal
----------------------------------------------------------------
----------------------------------------------------------------

II. Users, Groups, and Roles
----------------------------------------------------------------
lab: 
create user 
	https://www.youtube.com/watch?v=pTOCCYO_UmI

Groups 
	https://www.youtube.com/watch?v=uy-9mwCUQu8
	Membership Type 
		Assigned 
		Dynamic 

----------------------------------------------------------------

Users
----------------------------------------------------------------
----------------------------------------------------------------
Creating and Managing Cloud-Only Users
----------------------------------------------------------------
----------------------------------------------------------------
Inviting Guest Users
----------------------------------------------------------------
----------------------------------------------------------------
User Profile Properties
----------------------------------------------------------------
----------------------------------------------------------------
Bulk User Management (CSV Upload)
----------------------------------------------------------------
----------------------------------------------------------------
Groups
----------------------------------------------------------------
----------------------------------------------------------------
Security Groups vs. Microsoft 365 Groups
----------------------------------------------------------------
----------------------------------------------------------------
Creating and Managing Groups
----------------------------------------------------------------
----------------------------------------------------------------
Dynamic vs. Assigned Membership
----------------------------------------------------------------
----------------------------------------------------------------
Adding and Removing Members
----------------------------------------------------------------
----------------------------------------------------------------
Roles
----------------------------------------------------------------
----------------------------------------------------------------
Understanding Azure AD Roles
----------------------------------------------------------------
----------------------------------------------------------------
Role Assignments and Scope
----------------------------------------------------------------
----------------------------------------------------------------

III. Authentication vs. Authorization

Understanding Authentication
----------------------------------------------------------------
----------------------------------------------------------------
Granting Permissions to Resources
----------------------------------------------------------------
----------------------------------------------------------------
Role-Based Access Control (RBAC)
----------------------------------------------------------------
----------------------------------------------------------------

----------------------------------------------------------------
----------------------------------------------------------------
IV. Azure AD Identity Protection
----------------------------------------------------------------
----------------------------------------------------------------

Introduction to Azure AD Identity Protection
----------------------------------------------------------------
----------------------------------------------------------------
Detecting and Responding to Identity Risks
----------------------------------------------------------------
----------------------------------------------------------------
Risk Detections (e.g., anomalous sign-ins, unfamiliar locations)
----------------------------------------------------------------
----------------------------------------------------------------

V. Multi-Factor Authentication (MFA)
----------------------------------------------------------------
----------------------------------------------------------------

Introduction to Multi-Factor Authentication
----------------------------------------------------------------
----------------------------------------------------------------
Why MFA is Important
----------------------------------------------------------------
----------------------------------------------------------------
MFA Methods (Authenticator App, Phone Call, SMS)
----------------------------------------------------------------
----------------------------------------------------------------
Enabling and Enforcing MFA
----------------------------------------------------------------
----------------------------------------------------------------
Per-User MFA
----------------------------------------------------------------
----------------------------------------------------------------
Conditional Access-based MFA
----------------------------------------------------------------
----------------------------------------------------------------
MFA Registration Policy
----------------------------------------------------------------
----------------------------------------------------------------
Managing MFA Settings and User Enrollment
----------------------------------------------------------------
----------------------------------------------------------------
VI. Conditional Access Policies
----------------------------------------------------------------
----------------------------------------------------------------

Introduction to Conditional Access
----------------------------------------------------------------
----------------------------------------------------------------
Granting or Blocking Access Based on Conditions
----------------------------------------------------------------
----------------------------------------------------------------
Signals Used in Conditional Access (User Risk, Sign-in Risk, Device State, Location, Application)
----------------------------------------------------------------
----------------------------------------------------------------

VII. Role-Based Access Control (RBAC)

----------------------------------------------------------------
----------------------------------------------------------------
Introduction to Azure RBAC
----------------------------------------------------------------
----------------------------------------------------------------
Managing Access to Azure Resources (Subscriptions, Resource Groups, Individual Resources)
----------------------------------------------------------------
----------------------------------------------------------------
Roles, Role Assignments, and Scope
----------------------------------------------------------------
----------------------------------------------------------------
Built-in Roles vs. Custom Roles
----------------------------------------------------------------
----------------------------------------------------------------
Overview of Common Built-in Roles (Owner, Contributor, Reader)
----------------------------------------------------------------
----------------------------------------------------------------
Understanding Role Definitions and Permissions
----------------------------------------------------------------
----------------------------------------------------------------
Creating and Managing Custom Roles using the Azure Portal, CLI, and PowerShell
----------------------------------------------------------------
----------------------------------------------------------------
Assigning Permissions
----------------------------------------------------------------
----------------------------------------------------------------
Assigning Built-in Roles
----------------------------------------------------------------
----------------------------------------------------------------
Assigning Custom Roles
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
Managing Role Assignments
----------------------------------------------------------------
----------------------------------------------------------------
Best Practices for RBAC"
----------------------------------------------------------------
----------------------------------------------------------------
"Automate Resource Management with CLI
----------------------------------------------------------------
----------------------------------------------------------------
Use AZ and PowerShell for VM creation and app Deployment
----------------------------------------------------------------
----------------------------------------------------------------
Implement a Runbook for Task Automation
----------------------------------------------------------------
----------------------------------------------------------------


Table of Contents: Managing Azure with Automation
I. Introduction to Azure Automation
----------------------------------------------------------------

lab2:
	start powershell as "Admin"
	
	check powershell version 
		$PSVersionTable
	https://github.com/PowerShell/PowerShell/releases	

	$ Connect-AzAccount
		connect - default first subscription will be picked up
	Set-AzContext 
		change subscription using this command 
	Get-AzSubscription
		list all my subscriptions 
	SetAzContext -Subscription "id from above command"
	
		


Azure Automation is a cloud-based automation and configuration service that allows you to automate manual, long-running, error-prone, and frequently repeated tasks. It helps you manage your Azure and non-Azure environments efficiently, reducing operational overhead and increasing consistency. Think of it as your cloud-native scripting and orchestration engine.

Here's a breakdown of key concepts and benefits of Azure Automation:

Core Concepts:

	Runbooks: 
		These are the heart of Azure Automation. 
		Scripts written in 
			PowerShell Workflow, 
			Python 3, or 
			graphical formats 
				define the automation tasks you want to perform.
	PowerShell Workflow Runbooks: 
		Leverage the power of PowerShell 
			+ workflow capabilities for long-running operations and 
			checkpointing.
	Python 3 Runbooks: 
		Utilize the flexibility and extensive libraries of Python for automation tasks.
	Graphical Runbooks: 
		Provide a visual, 
			drag-and-drop interface for building 
				automation workflows, 
				making it accessible to users with less scripting experience.
	Graphical PowerShell Workflow Runbooks: 
		A visual way to create PowerShell Workflow runbooks.
	Automation Account: 
		This is your container in Azure where all your automation resources (runbooks, modules, schedules, variables, credentials, etc.) are stored and managed. You need at least one Automation Account to start using the service.
	Modules: 
		These are packages of pre-written cmdlets or Python libraries that you can import and use in your runbooks. Azure Automation provides a gallery of built-in modules and allows you to import custom modules or those from the PowerShell Gallery and PyPI.
	Schedules: 
		You can link your runbooks to schedules to run them automatically at predefined times or recurring intervals.
	Variables: 
		These are named values that can be used across your runbooks and configurations. They are useful for storing configuration settings, connection strings, or other dynamic data. You can manage them through the Azure portal or programmatically.
	Credentials: 
		Azure Automation provides a secure way to store and manage credentials (usernames and passwords) that your runbooks might need to authenticate to other systems or services.
	Connections: 
		These store connection information for specific services or systems, making it easier to manage connections across multiple runbooks. For example, you can create an Azure connection to interact with your Azure subscriptions.
	Hybrid Worker Groups: 
		To manage resources outside of Azure (like on-premises servers), you can configure Hybrid Workers. These are agents installed on your non-Azure machines that can execute runbooks locally.
	
	DSC (Desired State Configuration): 
		Azure Automation State Configuration is a managed DSC service that allows you to define and enforce the desired configuration of your Windows and Linux servers.
	Nodes: 
		The servers you are managing with DSC.
	Configurations: 
		PowerShell scripts that define the desired state of your nodes.
	Node Configurations: 
		Compiled MOF (Managed Object Format) documents that apply a specific configuration to a node.
	Compilation Jobs: 
		Processes that compile DSC configurations into node configurations.
	Pull Server: 
		The Azure Automation DSC service acts as a pull server, where nodes periodically check for and apply their assigned configurations.
	Update Management: 
		A feature built on top of Azure Automation that allows you to manage and deploy operating system updates to your Azure and non-Azure VMs.
	Change Tracking and Inventory: 
		Another feature leveraging Azure Automation, providing insights into changes in your VMs' software, services, registry, and files.

Common Use Cases for Azure Automation:

	Starting and stopping Azure VMs on a schedule.
	Patching and updating operating systems on VMs.
	Automating backups and restores.
	Managing Azure resources (creating, deleting, scaling).
	Deploying applications and configurations.
	Monitoring system health and responding to alerts.
	Orchestrating complex workflows across multiple systems.
	Managing hybrid environments (on-premises servers).
	Enforcing desired state configurations on servers.
Getting Started with Azure Automation:

	Create an Automation Account: 
		You'll need an Automation Account in your Azure subscription.
	Explore the Azure Portal: 
		Familiarize yourself with the different sections of your Automation Account.
	Create your first Runbook: 
		Start with a simple PowerShell or Python script.
	Test and Publish your Runbook: 
		Ensure it works as expected and then make it available for scheduling or manual execution.
	Link to a Schedule: 
		Automate the execution of your runbook.
	Explore other features: 
		Investigate Modules, Variables, Credentials, DSC, Update Management, etc., as your needs evolve

----------------------------------------------------------------
Understanding the Need for Azure Automation
----------------------------------------------------------------
Benefits of Using Azure Automation:

	Increased Efficiency: 
		Automate repetitive tasks, freeing up IT staff to focus on more strategic initiatives.
	Reduced Errors: 
		Automation minimizes human error, leading to more consistent and reliable processes.
	Improved Compliance: 
		Enforce consistent configurations and track changes to meet regulatory requirements.
	Cost Savings: 
		Reduce operational costs associated with manual tasks and potential downtime due to errors.
	Faster Deployments: 
		Automate the deployment and configuration of resources, accelerating time-to-market.
	Hybrid Environment Management: 
		Manage both Azure and on-premises resources from a single platform.
	Scalability: 
		Easily scale your automation efforts as your environment grows.
	Centralized Management: 
		Provides a single pane of glass for managing automation tasks and configurations.

----------------------------------------------------------------
	Repetitive Tasks
----------------------------------------------------------------
	already covered 
----------------------------------------------------------------
	Consistency and Reliability
----------------------------------------------------------------
----------------------------------------------------------------
	Cost Optimization
----------------------------------------------------------------
----------------------------------------------------------------
	Complex Deployments
----------------------------------------------------------------
----------------------------------------------------------------
Overview of Azure Automation Services
----------------------------------------------------------------
----------------------------------------------------------------
	Azure CLI
----------------------------------------------------------------

https://learn.microsoft.com/en-us/cli/azure/reference-index?view=azure-cli-latest

General syntax 
	az vm create 
	az vm list
	az vm delete 
	
	az keyvault create 
	az keyvault list 
	az keyvault delete 

	az network vnet subnet create 
	az network vnet subnet list 
	az network vnet subnet delete 
	
		
	


Azure CLI: Overview, Setup, and Usage Examples
The Azure Command-Line Interface (CLI) is a powerful cross-platform command-line tool that allows you to manage Azure resources. With the Azure CLI, you can connect to Azure and execute administrative commands on Azure resources. It provides a way to automate tasks, script operations, and interact with Azure services without relying on the Azure portal.

Overview:

Command-Line Interface: It's an interactive or scriptable command-line experience. You type commands, and the CLI interacts with Azure APIs to perform actions.
Cross-Platform: You can install and run the Azure CLI on Windows, macOS, and Linux.
Automation and Scripting: The CLI is ideal for automating repetitive tasks and creating scripts for managing your Azure infrastructure as code.
Resource Management: It provides comprehensive control over various Azure resources, including virtual machines, storage accounts, databases, networking, and more.
Extensibility: The CLI can be extended with extensions to manage specific Azure services or add custom functionality.
Authentication: Supports various authentication methods, including Azure Active Directory (Azure AD) user accounts, service principals, and managed identities.
Output Formats: You can configure the output of commands in different formats like JSON, YAML, table, and text.
Azure Cloud Shell Integration: The Azure CLI is pre-installed and configured within the Azure Cloud Shell, a browser-based shell environment.
How to Setup Azure CLI:

The installation process varies depending on your operating system. Here's a general guide and links to official documentation:

1. Prerequisites:

Python: The Azure CLI is built on Python. Ensure you have Python 3.6 or later installed on your system.
pip: Python's package installer (pip) is required to install the Azure CLI.
2. Installation Methods:

Windows:




MSI Installer (Recommended): Download the MSI installer from the official Azure CLI documentation and follow the installation wizard.
PowerShell Script: You can also use a PowerShell script provided in the documentation.
Windows Subsystem for Linux (WSL): Follow the Linux installation instructions if you're using WSL.
Official Documentation: https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-windows

powershell documentation 
https://learn.microsoft.com/en-us/powershell/azure/?view=azps-13.4.0

Install documentation 
	https://learn.microsoft.com/en-us/powershell/azure/install-azps-linux?view=azps-13.4.0
	

powershell tutorial 
	https://learn.microsoft.com/en-us/powershell/azure/azureps-vm-tutorial?view=azps-13.4.0&tutorial-step=1
	
		Get-AzVM
		New-AzVM
		Remove-AzVM 
		
		Get-AzKeyVault 
		New-AzKeyVault 
		Remove-AzKeyVault 
		
		Get-AzVirtualNetwork
		New-AzVirtualNetwork 
		Remove-AzVirtualNetwork 	
		
		Get-AzVirtualNetworkSubnetConfig
		New-AzVirtualNetworkSubnetConfig 
		Remove-AzVirtualNetworkSubnetConfig	
		
		

macOS:

Homebrew (Recommended): If you have Homebrew installed, use the command: brew update && brew install azure-cli
Manual Installation: You can also install manually using a Python script.
Official Documentation: https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-macos
Linux:

The installation steps vary depending on your specific Linux distribution (e.g., Debian, Ubuntu, Red Hat, CentOS, Fedora, openSUSE).
Use the package manager specific to your distribution (e.g., apt-get, yum, dnf, zypper).
Microsoft provides detailed installation instructions for various distributions.
Official Documentation: https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-linux



3. Verify Installation:

After installation, open your terminal or command prompt and run the following command to verify that the Azure CLI is installed correctly and to see its version:






az --version
This should display the Azure CLI version and other relevant information.

4. Login to Azure:

To start managing your Azure resources, you need to log in to your Azure account. Use the az login command:



	az login

This will typically open a browser window where you can enter your Azure account credentials. If you are already logged in via the Azure portal, it might automatically authenticate you.

Examples of Azure CLI Usage:

Here are some common examples of how to use the Azure CLI to manage Azure resources:

1. Managing Resource Groups:

List all resource groups:


	az group list
Create a new resource group:


	az group create --name myResourceGroup --location eastus
Delete a resource group (use with caution!):


	az group delete --name myResourceGroup --yes --no-wait
2. Managing Virtual Machines (VMs):

List all VMs in a resource group:


	az vm list --resource-group myResourceGroup --output table
Create a new Linux VM:


	az vm create --resource-group myResourceGroup --name myVM --image UbuntuLTS --size Standard_DS1_v2 --admin-username azureuser --generate-ssh-keys
Start a VM:


	az vm start --resource-group myResourceGroup --name myVM
Stop a VM:


	az vm stop --resource-group myResourceGroup --name myVM --deallocate
Delete a VM (use with caution!):


	az vm delete --resource-group myResourceGroup --name myVM --yes --no-wait
3. Managing Storage Accounts:

List all storage accounts in a resource group:


	az storage account list --resource-group myResourceGroup --output table

Create a new storage account:


	az storage account create --resource-group myResourceGroup --name mystorageaccount --location eastus --sku Standard_LRS
List blob containers in a storage account:


	az storage container list --account-name mystorageaccount --output table
Upload a file to a blob container:


	az storage blob upload --account-name mystorageaccount --container-name mycontainer --file myfile.txt --name myblob.txt
4. Managing Azure Kubernetes Service (AKS):

List all AKS clusters in a resource group:


	az aks list --resource-group myResourceGroup --output table
Create a new AKS cluster:


	az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 3 --generate-ssh-keys
Get credentials to access an AKS cluster (for kubectl):


	az aks get-credentials --resource-group myResourceGroup --name myAKSCluster --file ~/.kube/config
5. Using Azure Container Registry (ACR):

List all container registries in a resource group:


	az acr list --resource-group myResourceGroup --output table
Login to a container registry:


	az acr login --name mycontainerregistry
Push a Docker image to ACR:


	docker tag myimage mycontainerregistry.azurecr.io/myimage:v1
	docker push mycontainerregistry.azurecr.io/myimage:v1
6. Working with Azure Active Directory (Azure AD):

List users in Azure AD:


	az ad user list --output table
Create a new Azure AD user:


	az ad user create --display-name "New User" --user-principal-name newuser@yourdomain.com --password "SecurePassword123!"
List Azure AD groups:


	az ad group list --output table
7. Getting Help:

General help for the az command:


	az --help
Help for a specific command group (e.g., group):


	az group --help
Help for a specific command (e.g., group create):


	az group create --help
Key Concepts for Effective Usage:

	Command Structure: 
		Azure CLI commands follow a consistent structure: az <service> <resource> <action> [parameters].
	Command Groups: 
		Services like vm, storage, network, aks are command groups that contain related commands.
	Resources: 
		Within each service, you manage specific resources like virtual machines, storage accounts, virtual networks, etc.
	Actions: 
		Common actions include create, list, show, update, delete, start, stop, etc.
	Parameters: 
		Commands often require parameters to specify names, locations, sizes, and other configurations. Use --help to see available parameters.
	Output Formatting: 
		Use the --output parameter to control the output format for better readability or for parsing in scripts.
	Scripting: 
		Combine multiple CLI commands in shell scripts (Bash, PowerShell, etc.) to automate complex workflows.




In a windows machine with default powershell 
	- Download/update powershell 
		default is old
		update to powershell 7+
	- Download/update az module 
	
	
Run as admin 
	
----------------------------------------------------------------


overview Azure PowerShell, how to setup and examples of usage 
Azure PowerShell
----------------------------------------------------------------

Azure PowerShell: Overview, Setup, and Usage Examples
Overview:

Azure PowerShell is a set of cmdlets (lightweight commands) built on the .NET framework that allows you to manage your Azure resources directly from the PowerShell command line. It provides a powerful scripting environment for automating Azure tasks, managing infrastructure as code, and interacting with Azure services.

Key Features and Benefits:

Automation: Automate repetitive administrative tasks, reducing manual effort and potential errors.
Scripting: Create scripts to provision, configure, and manage complex Azure environments consistently.
Infrastructure as Code (IaC): Define and deploy your Azure infrastructure using PowerShell scripts, enabling version control and repeatability.
Comprehensive Management: Manage a wide range of Azure services, including virtual machines, storage, networking, databases, web apps, and more.
Cross-Platform Compatibility: The newer Az PowerShell module is cross-platform and works on Windows, macOS, and Linux (PowerShell 7 or higher is recommended). It's also compatible with Windows PowerShell 5.1.
Modular Design: Azure PowerShell is organized into modules, with each module focusing on a specific Azure service (e.g., Az.Compute for VMs, Az.Storage for storage accounts).
Object-Based Output: Cmdlets return .NET objects, allowing you to easily pipe and process output for further automation.
Integration with PowerShell Features: Leverage the full power of PowerShell, including variables, loops, conditional statements, and functions, in your Azure management scripts.
Azure Cloud Shell Integration: Azure PowerShell is pre-installed and ready to use within the Azure Cloud Shell, a browser-based interactive shell.
How to Setup Azure PowerShell:

The recommended way to install Azure PowerShell is using PowerShellGet, the package manager for PowerShell.

Prerequisites:

Windows:
PowerShell 5.1 or later (check with $PSVersionTable.PSVersion).
.NET Framework 4.7.2 or later.
Update PowerShellGet (run Install-Module -Name PowerShellGet -Force).
Linux and macOS:
PowerShell 7 or later (install from the official PowerShell documentation for your OS).
Installation Steps (using PowerShellGet):

Open PowerShell as Administrator (on Windows) or a regular terminal (on Linux/macOS).

Install the Az PowerShell module:

PowerShell

Install-Module -Name Az -Repository PSGallery -Force
-Name Az: Specifies the name of the module to install (the rollup module for all generally available Azure modules).
-Repository PSGallery: Specifies the PowerShell Gallery as the source.
-Force: Installs the module without prompting for confirmation (use with caution if you're unsure).
Update Azure PowerShell (if already installed):

PowerShell

Update-Module -Name Az -Force
Alternative Installation Methods:

MSI Installer (Windows only, for PowerShell 5.1): You can download the MSI installer from the official Azure PowerShell releases on GitHub.
Offline Installation: If your environment doesn't have internet access, you can download the modules on a connected machine and install them offline.
Docker Container: You can run Azure PowerShell within a Docker container.
Verify Installation:

After installation, verify that Azure PowerShell is installed correctly by running:

PowerShell

Get-Module -Name Az -ListAvailable
This should display a list of the installed Az modules and their versions.

Connect to Azure:

Before you can manage Azure resources, you need to connect to your Azure account:

PowerShell

Connect-AzAccount
This command will typically open a web browser where you can enter your Azure credentials. If you have multiple Azure subscriptions, you might be prompted to select one.

You can also connect using a Service Principal for automation scenarios:

PowerShell

$credential = Get-Credential
Connect-AzAccount -ServicePrincipal -Credential $credential -TenantId <YourTenantId>
Examples of Azure PowerShell Usage:

Here are some common examples of how to use Azure PowerShell to manage Azure resources:

1. Managing Resource Groups:

List all resource groups:
PowerShell

Get-AzResourceGroup
Create a new resource group:
PowerShell

New-AzResourceGroup -Name "myResourceGroup" -Location "East US"
Delete a resource group (use with caution!):
PowerShell

Remove-AzResourceGroup -Name "myResourceGroup" -Force -AsJob
2. Managing Virtual Machines (VMs):

List all VMs in a resource group:
PowerShell

Get-AzVM -ResourceGroupName "myResourceGroup"
Create a new Linux VM:
PowerShell

$vmConfig = New-AzVMConfig -VMName "myVM" -VMSize "Standard_DS1_v2"
$vmConfig = Set-AzVMOperatingSystem -VM $vmConfig -Linux -ComputerName "myVM" -Credential (Get-Credential)
$vmConfig = Set-AzVMSourceImage -VM $vmConfig -PublisherName "Canonical" -Offer "UbuntuServer" -Skus "18.04-LTS" -Version "latest"
$network = Get-AzVirtualNetwork -ResourceGroupName "myResourceGroup" -Name "myVNet"
$subnet = Get-AzVirtualNetworkSubnetConfig -VirtualNetwork $network -Name "default"
$nic = New-AzNetworkInterface -ResourceGroupName "myResourceGroup" -Name "myNIC" -Location "East US" -Subnet $subnet
$vmConfig = Add-AzVMNetworkInterface -VM $vmConfig -Id $nic.Id
New-AzVM -ResourceGroupName "myResourceGroup" -Location "East US" -VM $vmConfig
Start a VM:
PowerShell

Start-AzVM -ResourceGroupName "myResourceGroup" -Name "myVM"
Stop a VM:
PowerShell

Stop-AzVM -ResourceGroupName "myResourceGroup" -Name "myVM" -Force
Delete a VM (use with caution!):
PowerShell

Remove-AzVM -ResourceGroupName "myResourceGroup" -Name "myVM" -Force -AsJob
3. Managing Storage Accounts:

List all storage accounts in a resource group:
PowerShell

Get-AzStorageAccount -ResourceGroupName "myResourceGroup"
Create a new storage account:
PowerShell

New-AzStorageAccount -ResourceGroupName "myResourceGroup" -Name "mystorageaccount" -Location "East US" -SkuName Standard_LRS
List blob containers in a storage account:
PowerShell

Get-AzStorageContainer -StorageAccountName "mystorageaccount"
Upload a file to a blob container:
PowerShell

Set-AzStorageBlobContent -Container "mycontainer" -File "myfile.txt" -Blob "myblob.txt" -AccountName "mystorageaccount"
4. Managing Azure Kubernetes Service (AKS):

List all AKS clusters in a resource group:
PowerShell

Get-AzAksCluster -ResourceGroupName "myResourceGroup"
Create a new AKS cluster:
PowerShell

New-AzAksCluster -ResourceGroupName "myResourceGroup" -Name "myAKSCluster" -NodeCount 3 -GenerateSshKey
Get credentials to access an AKS cluster (for kubectl):
PowerShell

Get-AzAksClusterCredential -ResourceGroupName "myResourceGroup" -Name "myAKSCluster" -KubeConfig "~/.kube/config" -OverwriteExisting
Key Concepts for Effective Usage:

Cmdlet Naming Convention: Azure PowerShell cmdlets follow the Verb-Noun naming convention (e.g., Get-AzVM, New-AzResourceGroup). The noun usually starts with Az.
Parameters: Cmdlets accept parameters to specify the target resources and actions. Use Get-Help <CmdletName> to see the available parameters and examples.
Piping: You can pipe the output of one cmdlet to another to perform sequential operations.
Variables: Use PowerShell variables to store values and reuse them in your scripts.
Modules: Understand the different Az.* modules and import them if needed for specific tasks.
Asynchronous Operations: Many Azure PowerShell cmdlets support the -AsJob parameter to run operations in the background.
Output Formatting: Use cmdlets like Format-Table, Format-List, and ConvertTo-Json to control the output format.

----------------------------------------------------------------
overview Azure Automation Account, how to setup and examples of usage 

Azure Automation Account
----------------------------------------------------------------

Azure Automation Account: Overview, Setup, and Usage Examples
Overview:

An Azure Automation Account is a cloud-based service in Azure that provides a centralized platform for automating tasks across your Azure and non-Azure environments. It acts as a container for your automation assets, such as runbooks, modules, schedules, variables, credentials, and connections. Think of it as your dedicated automation workspace in the cloud.

Key Components and Concepts:

Runbooks: The core of automation. These are scripts (PowerShell Workflow, Python 3, or graphical) that define the automation tasks you want to execute.
Modules: Packages of pre-written cmdlets or Python libraries that extend the functionality of your runbooks. Azure provides built-in modules and allows you to import custom or community modules.
Schedules: Allow you to trigger runbooks automatically at defined times or recurring intervals.
Variables: Named values that can be used and managed across your runbooks and configurations, useful for storing configuration settings.
Credentials: Securely store and manage authentication information (usernames and passwords) used by your runbooks.
Connections: Store connection information for specific services or systems, simplifying connections across multiple runbooks (e.g., Azure, Service Management).
Hybrid Worker Groups: Enable you to run runbooks directly on non-Azure resources (on-premises servers, other clouds) by installing a Hybrid Worker agent.
DSC (Desired State Configuration) State Configuration: A managed DSC service for defining and enforcing the desired configuration of your Windows and Linux servers.
Update Management: A feature built on Azure Automation for managing and deploying operating system updates to your Azure and non-Azure VMs.
Change Tracking and Inventory: Provides insights into changes in your VMs' software, services, registry, and files, also built on Azure Automation.
Benefits of Using Azure Automation Account:

Centralized Management: Provides a single place to manage all your automation assets.
Scalability and Reliability: Azure handles the underlying infrastructure, ensuring your automation runs reliably and scales as needed.
Hybrid Environment Support: Manage both Azure and non-Azure resources.
Secure Credential Management: Securely store and access sensitive information.
Scheduling and Orchestration: Automate tasks based on schedules or trigger them manually.
Integration with Azure Services: Seamlessly interacts with other Azure services.
Reduced Operational Overhead: Automate manual, repetitive tasks, freeing up IT staff.
Improved Consistency: Ensure tasks are executed in a consistent and predictable manner.
How to Setup an Azure Automation Account:

Sign in to the Azure Portal: Go to the Azure portal (https://portal.azure.com) and log in with your Azure account credentials.

Create an Automation Account:

Click on "+ Create a resource" in the top-left corner.
Search for "Automation Account" and select it.
Click "Create".
Configure the Automation Account:

Subscription: Choose the Azure subscription where you want to create the Automation Account.
Resource Group: Select an existing resource group or create a new one to contain the Automation Account.
Automation Account Name: Enter a unique name for your Automation Account.
Region: Choose the Azure region where you want to deploy the Automation Account. Select a region that is geographically close to your resources for better performance.
Create Azure Run As account: It is highly recommended to select "Yes" for this option. This creates a Service Principal in your Azure AD tenant with the necessary permissions to manage resources in your subscription. Runbooks can then use this Run As account for authentication. You can choose between:
System-assigned managed identity: Azure manages the identity.
User-assigned managed identity: You create and manage the identity.
Classic Azure Run As account: A certificate-based service principal (being phased out, prefer managed identities).
Networking (Optional): Configure public network access or private endpoints if needed for security.
Tags (Optional): Add tags for organization and billing.
Review and Create: Review your configuration and click "Create" to deploy the Automation Account.

Access your Automation Account: Once the deployment is complete, navigate to your resource group and select the newly created Automation Account. You will see the overview page with various options to manage your automation assets.

Examples of Azure Automation Account Usage:

Here are some common examples of how to use an Azure Automation Account:

1. Running a Simple PowerShell Runbook:

Scenario: You want to automatically get a list of all running VMs in a specific resource group.
Steps:
Create a PowerShell Runbook:
In your Automation Account, go to "Runbooks" under "Process Automation".
Click "+ Create a runbook".
Enter a name for your runbook (e.g., Get-RunningVMs).
Select "PowerShell" as the Runbook type.
Click "Create".
In the editor, write the following PowerShell script:
PowerShell

param(
    [Parameter(Mandatory=$true)]
    [string]$ResourceGroupName
)

# Authenticate using the Run As account
$AzureContext = (Connect-AzAccount -Identity).Context
$SubscriptionId = $AzureContext.Subscription.Id
Select-AzSubscription -SubscriptionId $SubscriptionId

# Get running VMs in the specified resource group
Get-AzVM -ResourceGroupName $ResourceGroupName | Where-Object {$_.PowerState -eq "VM running"} | Select-Object Name
Click "Save" and then "Publish".
Test the Runbook:
Click "Start".
Enter the name of your resource group in the ResourceGroupName parameter.
Click "OK".
Monitor the job status under "Jobs" to see the output.
Schedule the Runbook (Optional):
Go to "Schedules" under "Shared Resources".
Click "+ Add a schedule".
Configure the schedule details (name, start time, recurrence).
Link the schedule to your Get-RunningVMs runbook and provide the ResourceGroupName parameter.
2. Running a Python 3 Runbook:

Scenario: You want to retrieve and print the list of storage accounts in a resource group using the Azure SDK for Python.
Steps:
Import Necessary Modules: Ensure the azure-mgmt-storage module is imported into your Automation Account (under "Modules" in "Shared Resources", click "+ Add a module", search for it in the Gallery).
Create a Python 3 Runbook:
Follow similar steps as above, but select "Python 3" as the Runbook type.
Write the following Python script:


----------------------------------------------------------------
Runbooks"
----------------------------------------------------------------
----------------------------------------------------------------
"Introduction to Infrastructure as Code (IaC)
----------------------------------------------------------------
----------------------------------------------------------------
Using ARM Templates vs Bicep vs Terraform
----------------------------------------------------------------
----------------------------------------------------------------
CI/CD for Infrastructure
----------------------------------------------------------------
----------------------------------------------------------------


Terraform Basics & Configuration:
----------------------------------------------------------------
----------------------------------------------------------------
Terraform Settings Block Introduction
----------------------------------------------------------------
----------------------------------------------------------------
Understand required_version in Terraform Block
----------------------------------------------------------------
----------------------------------------------------------------
Terraform Provider Introduction
----------------------------------------------------------------
----------------------------------------------------------------
Understand required_providers in Terraform Block and Provider Block
Terraform Apply and Destroy Commands Auto Approve Option
Terraform Multiple Providers Introduction
Implement Terraform Multiple Providers & Clean-Up
Terraform Dependency Lock File
Review c1-versions.tf, Create RG and Random String Resource
Create Terraform Storage Account Resource
Dependency Lock File Demo and CleanUp
Terraform Resource Syntax Introduction
Create TF Config for Virtual Network
Create TF Config for Subnet, Public IP and Network Interface
Terraform Resource Behavior Introduction
Resource Behavior: Create Resource Demo
Understand Terraform State in detail
Resource Behavior: Update-In-Place, Destroy-Recreate and Destroy Demo's
Understand Terraform Desired and Current States and CleanUp
Terraform Meta-Arguments:

All Meta-Arguments Introduction
Introduction to Meta-Argument depends_on
Execute TF Commands without depends_on and understand Terraform Behavior
Execute TF Commands with depends_on and understand Terraform Behavior
Introduction to Meta-Argument count
Meta-Argument Count - Azure Resource Group Demo
Introduction to Meta-Argument count for Azure Linux VM
Introduction to Meta-Argument for_each
Meta-Argument for_each with Maps Demo
for_each - Set of Strings Introduction and Terraform Console Command
Implement for_each with set of strings
for_each chaining Introduction and Review TF Configs
Implement for_each chaining
Introduction to Meta-Argument lifecycle
Explore default resource behavior - Delete and Recreate Resource
Lifecycle Meta-Argument create_before_destroy demo
Lifecycle Meta-Argument prevent_destroy demo
Without Lifecycle Meta-Argument ignore_changes understand
Lifecycle Meta-Argument ignore_changes demo
Terraform Input Variables:

Define Terraform Input Variable
Terraform Input Variable Basics Demo
Terraform Input Variables - Assign When Prompted demo
Terraform Input Variables - CLI Argument -var
Terraform Input Variables - CLI Argument -var by generating a TF Plan f
Terraform Input Variables - Override with Environment Variables
Terraform Input Variables - Override with terraform.tfvars
Terraform Input Variables - anyfilename.tfvars with -var-file argument
Terraform Input Variables - understand .auto.tfvars
Terraform Input Variables - Review TF Configs for List Item
Terraform Input Variables - Create List Variable, Verify and CleanUp
Terraform Input Variables - Review TF Configs for Maps Item
Terraform Input Variables - lookup function
Terraform Input Variables - Create Map Variables, Verify and CleanUp
Terraform Functions: Length, Substring, Lower, Upper and Contains
Terraform Input Variables - Validation Rules with OR and contains funct
Terraform Input Variables - Validation Rules with regex and can functio
Terraform Input Variables - Sensitive Introduction
Terraform Input Variables - Define Sensitive, bool and Number Variables
Terraform Input Variables - Create Azure MySQL Server Resources
Terraform Input Variables - Create Azure MySQL DB, Test and CleanUp
Terraform Input Variables - Structural Type Object Introduction
Terraform Input Variables - Create TF Configs of ST Object
Terraform Input Variables - Execute TF Commands, Verify and CleanUp ST
Terraform Input Variables - Create TF Configs for ST Tuple
Terraform Input Variables - Run TF Plan and Verify tuple var value repl
Terraform Input Variables - Introduction to Collection Type set
Terraform Input Variables - Review TFConfigs for CT Set
Terraform Input Variables - Execute TF Commands, Verify and CleanUp CT
Terraform Output Values & Local Values:

Output Values Introduction
Create Basic Output Values and Review TF Configs
Execute TF Commands, Verify and learn about ""terraform output"" command
Output Values with Sensitive flag and also ""terraform output -json""
Output Values with Meta-Argument count and Splat Expression
Output Values with Meta-Argument for_each and For Expression - Introduc
Create List Outputs
Create Map Outputs and use key and values functions
Create Local Values Terraform Config
Terraform Conditional Expressions & Data Sources:

Terraform Conditional Expressions Introduction and Create TF Configs
AZHCTA-36-02-TFCE-Conditional-Expressions-Execute-TFCommands-Verify-CleanUp
AZHCTA-36-03-TFCE-Conditional-Expressions-in-a-Resource-Demo
Terraform Data Source
Create Datasource for Resource Group Resource
Create Datasource for Virtual Network
Create Datasource for Azure Subscription
Terraform Remote State & State Management:

Terraform Remote State and Locking
Create Azure Storage Account and Container
Create TF Backend Block with Azure Storage Account and Review TF Config
Execute TF Commands, Verify Remote State Storage and Locking Features
Understand Azure Storage Account TF State File Versioning and CleanUp
Terraform state command
Terraform Show Command to read Terraform Plan Files
Terraform Show Command to read Terraform State Files
Terraform State List and Show Commands
Terraform State mv command
Terraform State rm command and replace-provider command
Terraform State Push Pull and Force-Unlock Commands
Terraform Taint and Untaint Commands
Terraform Plan and Apply - ""-target"" option for Resource Targeting
Introduction to ""terraform apply -refresh-only"" command
Execute TF Commands with ""terraform apply -refresh-only"" and Clean-Up
Terraform CLi with Workspace
Review TF Configs and understand terraform.workspace variable
Create Resources in default workspace and learn commands workspace list
Create new workspace, create resources and understand state files
Learn to delete resources in workspaces and deleting workspaces
Implement CLI Workspaces with Remote State Storage Backend
Terraform Provisioners:

Understand File Provisioner, Self Object and Create Connection Block
Understand Creation-Time Provisioner and Create File Provisioners
Execute TF Commands and Verify Files provisioned to Linux VM
Provisioners on_failure = continue or fail verify and cleanup
Remote-exec Provisioner Demo
Local-exec Provisioner Demo
Understand Null and Time Resources and Create Time Resource
Create Null Resource, File and remote-exec Provisioners and Triggers
Execute TF Commands, Verify Static Content and Understand more about null
Understand Terraform Import and Import Resource Group
Create RG Resource by referring TFSTATE file, Verify and CleanUp

Terraform Modules:

Understand Terraform Modules and its features
Create VNET Module and reference it in VMNIC Resource
Execute TF Commands, Verify VNET, Subnet and Access Sample App
Taint Child Module Resources and Clean-Up
Understand about Child Modules and Create it
Create Root Module TF Configs
Execute TF Commands, Verify and CleanUp Static Website created
Understand Terraform get command
Create Git Repo and Commit Static Website TF Module Files and Create 1.
Publish the Module to Terraform Public Registry and Verify
Create Root Module and call public registry module newly published
Learn Module Management in Public Registry and Module Versioning
Introduction to Terraform Private Module Registry

----------------------------------------------------------------
----------------------------------------------------------------
Step-02: Create Git Repo and Publish 1.0.0 release"
----------------------------------------------------------------
----------------------------------------------------------------
"Deploying Applications: Introduction to AKS, Setting up AKS cluster, Deploying containerized applications to AKS, Managing AKS workloads, Scaling applications, Monitoring and logging in AKS, AKS networking (Azure CNI) and security, 
AKS cluster best practices"
----------------------------------------------------------------
----------------------------------------------------------------
"
Introduction to Azure Virtual Networks (VNets)
----------------------------------------------------------------


Azure Virtual Network (VNet) is a fundamental building block for your private network in Azure. It provides an isolated, logically segmented network within the Azure cloud, allowing you to launch Azure resources (like Virtual Machines, Azure App Service Environments, Azure Kubernetes Service (AKS) clusters, etc.) and enable them to communicate securely with each other, the internet, and your on-premises networks.

Think of a VNet as your own private data center within Azure. You have full control over its IP address range, subnets, security policies, and routing configurations.

Key Concepts and Components of Azure VNets:

Address Space: When you create a VNet, you define one or more contiguous, non-overlapping IP address ranges in CIDR (Classless Inter-Domain Routing) notation (e.g., 10.0.0.0/16). This defines the private IP address space for all resources within that VNet.
Subnets: You divide the VNet's address space into one or more subnets. Each subnet is a logical grouping of IP addresses within the VNet's range. Subnets help you organize and secure your resources. For example, you might have separate subnets for web servers, application servers, and databases.
Regions: A VNet is scoped to a single Azure region. However, you can connect VNets in different regions using VNet peering or Azure Virtual WAN.
Availability Zones: Within a region that supports Availability Zones, you can deploy resources within a subnet across multiple availability zones for higher availability and fault tolerance.
Security: VNets provide a natural layer of isolation. Resources within a VNet can communicate with each other privately. You can further enhance security using:
Network Security Groups (NSGs): Stateful firewalls that control inbound and outbound traffic at the subnet and network interface (NIC) level.
Application Security Groups (ASGs): Enable you to group VMs by application and apply security rules based on those groups, simplifying management for complex applications.
Azure Firewall: A managed, cloud-based network security service that provides advanced threat protection, filtering, and centralized policy management.
Routing: Azure automatically routes traffic between subnets within a VNet. You can also create custom routes (User-Defined Routes - UDRs) to control how traffic is routed, for example, to a network virtual appliance (NVA) for advanced security or monitoring.
Connectivity: VNets enable various connectivity scenarios:
Intra-VNet Communication: Resources within the same VNet can communicate with each other using private IP addresses.
Internet Connectivity: Resources in a VNet can communicate with the internet using public IP addresses (associated directly or via a Network Address Translation (NAT) gateway).
On-premises Connectivity: You can connect your VNet to your on-premises network using:
Azure VPN Gateway: Creates secure, encrypted tunnels (Site-to-Site VPN or Point-to-Site VPN).
Azure ExpressRoute: Provides a dedicated, private, high-bandwidth connection.
Inter-VNet Connectivity: You can connect VNets together using:
VNet Peering: Connects VNets in the same or different regions through the Azure backbone network, allowing resources in different VNets to communicate using private IP addresses.
Azure Virtual WAN: A networking service that provides optimized and automated branch-to-Azure and Azure-to-Azure connectivity.
Service Endpoints: Provide secure and direct connectivity to Azure service resources (like Azure Storage, Azure SQL Database, Azure Cosmos DB) over the Azure backbone network, without exposing your VNet to the public internet.
Private Endpoints: Provide private and secure connectivity to Azure services from within your VNet using a private IP address from your VNet's address space. This eliminates the need for public IP addresses and keeps traffic within the Azure network.
Benefits of Using Azure VNets:

Isolation and Security: Provides a private and isolated network environment for your Azure resources.
Control: You have full control over the network topology, IP addressing, routing, and security policies.
Scalability: Easily scale your network as your application and resource needs grow.
Hybrid Connectivity: Seamlessly connect your Azure environment to your on-premises infrastructure.
High Availability and Resilience: Design highly available applications by deploying resources across subnets and Availability Zones within a VNet.
Integration with Azure Services: VNets are the foundation for connecting and securing various Azure services.
Common Use Cases for Azure VNets:

Hosting Azure Virtual Machines: Deploying VMs within a VNet allows them to communicate privately and securely.
Creating Azure Kubernetes Service (AKS) Clusters: AKS clusters are deployed within a VNet, providing network isolation for your containerized applications.
Deploying Azure App Service Environments (ASEs): ASEs are deployed into a subnet within a VNet, offering a dedicated and isolated environment for your web applications.
Connecting Azure to On-premises Networks: Establishing hybrid connectivity using VPN Gateway or ExpressRoute.
Securing Azure Services: Using Service Endpoints and Private Endpoints to restrict access to Azure services from within your VNet.
Building Multi-Tier Applications: Architecting applications with different tiers (web, application, database) deployed in separate subnets with controlled communication using NSGs.
Implementing Network Virtual Appliances (NVAs): Deploying third-party security or networking appliances (like firewalls or load balancers) within a VNet and routing traffic through them using UDRs.
Getting Started with Azure VNets:

You can create and manage Azure VNets using various tools:

Azure Portal: A web-based graphical user interface.
Azure CLI: A command-line tool for managing Azure resources.
Azure PowerShell: A set of cmdlets for managing Azure resources using PowerShell.
Azure Resource Manager (ARM) Templates or Bicep: Infrastructure-as-Code tools for defining and deploying your VNet and associated resources.

----------------------------------------------------------------
Definition and Benefits of VNets
----------------------------------------------------------------

Introduction to Azure Virtual Networks (VNets)
Azure Virtual Network (VNet) is a fundamental building block for your private network in Azure. It provides an isolated, logically segmented network within the Azure cloud, allowing you to launch Azure resources (like Virtual Machines, Azure App Service Environments, Azure Kubernetes Service (AKS) clusters, etc.) and enable them to communicate securely with each other, the internet, and your on-premises networks.

Think of a VNet as your own private data center within Azure. You have full control over its IP address range, subnets, security policies, and routing configurations.

Key Concepts and Components of Azure VNets:

Address Space: When you create a VNet, you define one or more contiguous, non-overlapping IP address ranges in CIDR (Classless Inter-Domain Routing) notation (e.g., 10.0.0.0/16). This defines the private IP address space for all resources within that VNet.
Subnets: You divide the VNet's address space into one or more subnets. Each subnet is a logical grouping of IP addresses within the VNet's range. Subnets help you organize and secure your resources. For example, you might have separate subnets for web servers, application servers, and databases.
Regions: A VNet is scoped to a single Azure region. However, you can connect VNets in different regions using VNet peering or Azure Virtual WAN.
Availability Zones: Within a region that supports Availability Zones, you can deploy resources within a subnet across multiple availability zones for higher availability and fault tolerance.
Security: VNets provide a natural layer of isolation. Resources within a VNet can communicate with each other privately. You can further enhance security using:
Network Security Groups (NSGs): Stateful firewalls that control inbound and outbound traffic at the subnet and network interface (NIC) level.
Application Security Groups (ASGs): Enable you to group VMs by application and apply security rules based on those groups, simplifying management for complex applications.
Azure Firewall: A managed, cloud-based network security service that provides advanced threat protection, filtering, and centralized policy management.
Routing: Azure automatically routes traffic between subnets within a VNet. You can also create custom routes (User-Defined Routes - UDRs) to control how traffic is routed, for example, to a network virtual appliance (NVA) for advanced security or monitoring.
Connectivity: VNets enable various connectivity scenarios:
Intra-VNet Communication: Resources within the same VNet can communicate with each other using private IP addresses.
Internet Connectivity: Resources in a VNet can communicate with the internet using public IP addresses (associated directly or via a Network Address Translation (NAT) gateway).
On-premises Connectivity: You can connect your VNet to your on-premises network using:
Azure VPN Gateway: Creates secure, encrypted tunnels (Site-to-Site VPN or Point-to-Site VPN).
Azure ExpressRoute: Provides a dedicated, private, high-bandwidth connection.
Inter-VNet Connectivity: You can connect VNets together using:
VNet Peering: Connects VNets in the same or different regions through the Azure backbone network, allowing resources in different VNets to communicate using private IP addresses.
Azure Virtual WAN: A networking service that provides optimized and automated branch-to-Azure and Azure-to-Azure connectivity.
Service Endpoints: Provide secure and direct connectivity to Azure service resources (like Azure Storage, Azure SQL Database, Azure Cosmos DB) over the Azure backbone network, without exposing your VNet to the public internet.
Private Endpoints: Provide private and secure connectivity to Azure services from within your VNet using a private IP address from your VNet's address space. This eliminates the need for public IP addresses and keeps traffic within the Azure network.
Benefits of Using Azure VNets:

Isolation and Security: Provides a private and isolated network environment for your Azure resources.
Control: You have full control over the network topology, IP addressing, routing, and security policies.
Scalability: Easily scale your network as your application and resource needs grow.
Hybrid Connectivity: Seamlessly connect your Azure environment to your on-premises infrastructure.
High Availability and Resilience: Design highly available applications by deploying resources across subnets and Availability Zones within a VNet.
Integration with Azure Services: VNets are the foundation for connecting and securing various Azure services.
Common Use Cases for Azure VNets:

Hosting Azure Virtual Machines: Deploying VMs within a VNet allows them to communicate privately and securely.
Creating Azure Kubernetes Service (AKS) Clusters: AKS clusters are deployed within a VNet, providing network isolation for your containerized applications.
Deploying Azure App Service Environments (ASEs): ASEs are deployed into a subnet within a VNet, offering a dedicated and isolated environment for your web applications.
Connecting Azure to On-premises Networks: Establishing hybrid connectivity using VPN Gateway or ExpressRoute.
Securing Azure Services: Using Service Endpoints and Private Endpoints to restrict access to Azure services from within your VNet.
Building Multi-Tier Applications: Architecting applications with different tiers (web, application, database) deployed in separate subnets with controlled communication using NSGs.
Implementing Network Virtual Appliances (NVAs): Deploying third-party security or networking appliances (like firewalls or load balancers) within a VNet and routing traffic through them using UDRs.
Getting Started with Azure VNets:

You can create and manage Azure VNets using various tools:

Azure Portal: A web-based graphical user interface.
Azure CLI: A command-line tool for managing Azure resources.
Azure PowerShell: A set of cmdlets for managing Azure resources using PowerShell.
Azure Resource Manager (ARM) Templates or Bicep: Infrastructure-as-Code tools for defining and deploying your VNet and associated resources.

----------------------------------------------------------------
IP Address Spaces and Address Ranges
----------------------------------------------------------------


IP Address Spaces and Address Ranges in Azure Virtual Networks (VNets) using Azure CLI (az vnet)
When working with Azure Virtual Networks (VNets) using the Azure CLI's az vnet command group, understanding IP address spaces and address ranges is fundamental. Here's an overview of these concepts and how they relate to az vnet:

1. IP Address Space:

Definition: The IP address space of a VNet is a range of private IP addresses that you define when creating the VNet. This range is specified in CIDR (Classless Inter-Domain Routing) notation (e.g., 10.0.0.0/16, 172.16.0.0/12, 192.168.0.0/24).
Private IP Addresses: VNets exclusively use private IP addresses as defined in RFC 1918. These addresses are not routable on the public internet.
Contiguous Block: The IP address space you define must be a single, contiguous block. You cannot specify multiple disjointed ranges when initially creating the VNet.
Uniqueness: The IP address space of a VNet should not overlap with the IP address spaces of other VNets you connect to (via VNet peering or VPN/ExpressRoute) or your on-premises networks to avoid routing conflicts.
Size Limits: Azure supports a maximum of one IP address space for a VNet during creation. However, you can add up to four additional non-overlapping CIDR address ranges to an existing VNet after its creation. The total address space for a VNet is limited to 65,536 IP addresses.
Using az vnet to Manage IP Address Space:

Creating a VNet with an Initial Address Space:



az network vnet create \
  --resource-group myResourceGroup \
  --name myVNet \
  --address-prefixes 10.0.0.0/16 \
  --location eastus
Here, --address-prefixes 10.0.0.0/16 specifies the initial IP address space for the myVNet.

Adding an Additional Address Space to an Existing VNet:



az network vnet update \
  --resource-group myResourceGroup \
  --name myVNet \
  --address-prefixes 10.0.0.0/16 192.168.1.0/24
This command updates the myVNet to include the additional address space 192.168.1.0/24. Note that you need to include the existing prefixes as well when updating.

Listing the Address Prefixes of a VNet:



az network vnet show \
  --resource-group myResourceGroup \
  --name myVNet \
  --query addressSpace.addressPrefixes
This command will output a JSON array containing the configured address prefixes for the VNet.

2. Subnet Address Ranges:

Definition: Subnets are subdivisions of the VNet's IP address space. When you create a subnet within a VNet, you assign a specific range of IP addresses from the VNet's overall address space to that subnet.
CIDR Notation: Subnet address ranges are also defined using CIDR notation. The prefix of the subnet must be within the prefix of the VNet. For example, if your VNet has an address space of 10.0.0.0/16, you can create subnets with ranges like 10.0.1.0/24, 10.0.2.0/24, etc.
Uniqueness within VNet: Subnet address ranges within the same VNet must be unique and cannot overlap.
Azure Reserved Addresses: Azure reserves the first five and the last IP addresses within each subnet for its internal use (e.g., network address, broadcast address, Azure DNS, default gateway, future use). These addresses are not available for assignment to resources. For example, in a /24 subnet (256 addresses), only 251 are usable.
Using az vnet subnet to Manage Subnet Address Ranges:

Creating a Subnet with an Address Range:



az network vnet subnet create \
  --resource-group myResourceGroup \
  --vnet-name myVNet \
  --name mySubnet \
  --address-prefixes 10.0.1.0/24
Here, --address-prefixes 10.0.1.0/24 defines the address range for the mySubnet, which must be within the VNet's address space (10.0.0.0/16 in this case).

Adding an Additional Address Prefix to an Existing Subnet (Requires the Subnet feature flag to be enabled for your subscription):



az network vnet subnet update \
  --resource-group myResourceGroup \
  --vnet-name myVNet \
  --name mySubnet \
  --address-prefixes 10.0.1.0/24 10.0.2.0/24
Similar to updating the VNet's address space, you need to include existing prefixes when adding new ones. Important: This functionality of having multiple address prefixes per subnet is a newer feature and might require enabling a preview feature flag in your Azure subscription.

Listing the Address Prefix of a Subnet:



az network vnet subnet show \
  --resource-group myResourceGroup \
  --vnet-name myVNet \
  --name mySubnet \
  --query addressPrefix
This command will output the primary address prefix of the specified subnet. If multiple prefixes are configured (with the feature flag enabled), use --query addressPrefixes to see all of them.

Updating the Address Prefix of a Subnet:



az network vnet subnet update \
  --resource-group myResourceGroup \
  --vnet-name myVNet \
  --name mySubnet \
  --address-prefixes 10.0.3.0/24
This command changes the address prefix of mySubnet to 10.0.3.0/24. Ensure this new range is within the VNet's address space and doesn't overlap with other subnets.

Key Considerations When Planning IP Address Spaces and Ranges:

Scalability: Plan your VNet address space with future growth in mind. It's easier to start with a larger range than to try and expand later, which can involve downtime and complexity.
Organization: Use subnets to logically organize your resources based on function, security requirements, or environment. 
Connectivity: Consider the IP address ranges of networks you might want to connect to (on-premises, other VNets) to avoid overlaps.
Azure Service Requirements: Some Azure services might have specific subnet requirements (e.g., Azure Firewall, Gateway Subnet). 
Address Space Limitations: Be aware of the limits on the number and size of address spaces and subnets per VNet.

----------------------------------------------------------------
Regional Scope of VNets
----------------------------------------------------------------



The scope of Azure Virtual Networks (VNets) is regional. This means that a VNet you create is tied to a specific Azure region (e.g., East US, West Europe, Southeast Asia). All the resources you deploy within that VNet, such as virtual machines, Azure Kubernetes Service (AKS) clusters, and App Service Environments, must also reside in the same region as the VNet.

Here's a breakdown of the regional scope and its implications:

Key Aspects of Regional Scope:

Single Region Confinement: When you create a VNet, you must choose a specific Azure region. All subnets and resources created within that VNet are bound to that region.
Availability Zones: While a VNet itself spans across all Availability Zones within a region, the resources you deploy within its subnets can be placed in specific Availability Zones for higher availability. You don't need to create separate VNets or subnets for each Availability Zone.
Inter-Resource Communication within a Region: Resources within the same VNet, regardless of the Availability Zone they are in, can communicate with each other using private IP addresses with low latency.
Isolation within a Region: By default, VNets within the same region are isolated from each other. To enable communication between different VNets (even in the same region), you need to establish VNet peering.
Connectivity to Resources Outside the Region:
Internet: Resources in a VNet can connect to the public internet through public IP addresses or NAT Gateways.
Other Azure Services: You can use Service Endpoints and Private Endpoints to securely connect to other Azure services within or outside the region, often keeping traffic within the Azure backbone network.
On-premises Networks: You can establish connections to your on-premises networks using Azure VPN Gateway or Azure ExpressRoute, which can span across regions.
Other VNets in Different Regions: To connect VNets in different Azure regions, you use Global VNet Peering or Azure Virtual WAN.
Why is VNet Scope Regional?

The regional scope of VNets aligns with the fundamental architecture of Azure, where resources are typically deployed within specific geographic locations for factors like:

Latency: Keeping resources that need to communicate closely within the same region minimizes network latency.
Compliance and Data Sovereignty: Some regulatory requirements mandate that data and applications reside within specific geographic boundaries.
Fault Isolation: Regional isolation helps to contain the impact of failures within a specific geographic area.
Connecting VNets Across Regions:

While VNets are regional, Azure provides mechanisms to connect them across different regions:

Global VNet Peering: This allows you to connect VNets in different Azure regions, enabling resources in those VNets to communicate using private IP addresses. It provides low-latency, high-bandwidth connectivity across the Azure backbone.
Azure Virtual WAN: This is a networking service designed for creating large-scale global network topologies. It simplifies connectivity between VNets across regions and to on-premises locations.
----------------------------------------------------------------
Introduction to Subnets
----------------------------------------------------------------

Introduction to Subnets
In the context of networking, a subnet (short for subnetwork) is a logical subdivision of an IP network. It allows you to divide a larger network into smaller, more manageable, and logically organized segments. This segmentation provides several benefits for network administration, performance, and security.

Think of a larger IP network as a big apartment building, and subnets as individual apartments within that building. Each apartment (subnet) has its own range of addresses and occupants (devices), but they all reside within the same overall building (the larger IP network).

Key Concepts of Subnets:

IP Address Range Division: When you create a subnet, you take a portion of the larger network's IP address range and allocate it to that specific subnet. This is done using subnetting, a process that involves manipulating the network mask.
Network Mask: A network mask (or subnet mask) is a 32-bit number (in IPv4) that separates the IP address into two parts: the network portion and the host portion.
The contiguous '1' bits in the network mask identify the network.
The contiguous '0' bits in the network mask identify the host portion within that network.
Subnetting involves borrowing bits from the host portion of the IP address and using them to define additional network segments (subnets). This results in a longer network portion (more '1's in the mask) and a smaller host portion (fewer '0's), meaning fewer usable host addresses per subnet but more subnets overall.
Broadcast Domain: Each subnet represents its own broadcast domain. A broadcast message sent within one subnet will only reach devices within that same subnet and will not be forwarded to other subnets by a standard Layer 2 switch. This helps to limit network traffic and improve efficiency.
Logical Organization: Subnets allow you to logically group devices based on their function, department, security requirements, or physical location. For example, you might have separate subnets for servers, workstations, printers, or different departments within an organization.
Security Boundaries: Subnets can act as security boundaries. You can implement access control lists (ACLs) or firewall rules at the router or Layer 3 switch level to control traffic flow between different subnets, enhancing network security.
Performance Optimization: By dividing a large network into smaller subnets, you can reduce network congestion and improve performance. Local traffic stays within the subnet, and only traffic destined for other subnets needs to be routed.
Network Administration: Subnets simplify network administration by making it easier to manage IP address allocation, troubleshoot network issues, and implement security policies for specific groups of devices.
How Subnetting Works (Simplified):

Imagine you have a Class C network with the address 192.168.1.0 and a default subnet mask of 255.255.255.0 (/24). This gives you 254 usable host addresses.

If you need two subnets, you can "borrow" one bit from the host portion of the IP address for subnetting. This changes the subnet mask to 255.255.255.128 (/25).

Subnet 1: 192.168.1.0 - 192.168.1.127 (usable hosts: 192.168.1.1 - 192.168.1.126)
Subnet 2: 192.168.1.128 - 192.168.1.255 (usable hosts: 192.168.1.129 - 192.168.1.254)
You've now created two subnets, each with fewer usable host addresses but providing logical separation.

Subnets in Cloud Environments (e.g., Azure VNets):

The concept of subnets is equally important in cloud networking, such as within Azure Virtual Networks (VNets). When you create a VNet, you divide its IP address space into one or more subnets. This allows you to:

Organize Azure Resources: Deploy different types of resources (e.g., VMs, databases, application gateways) into separate subnets for better management and security.
Implement Network Security Groups (NSGs): Apply NSGs to specific subnets to control inbound and outbound traffic for all resources within that subnet.
Define Route Tables: Associate route tables with subnets to customize the routing of traffic leaving those subnets.
Integrate with Azure Services: Some Azure services have specific subnet requirements or recommendations for deployment.

----------------------------------------------------------------
Public Vs Private Subnet
----------------------------------------------------------------

In Azure, the distinction between a "public" and "private" subnet isn't a configuration setting you explicitly define with the az vnet subnet command. Instead, it's determined by the routing configuration associated with the subnet and whether resources within that subnet have a public IP address assigned to them.

Here's a breakdown of how to understand public vs. private subnets in the context of Azure and az vnet:

Public Subnet:

A subnet is generally considered "public" if it has a route to an Internet Gateway (IGW) associated with its Virtual Network (VNet). Resources in a public subnet can directly communicate with the public internet if they are also assigned a public IP address (either directly or through an associated Load Balancer).

Key characteristics of a public subnet:

Route to Internet Gateway: The subnet's route table contains a route with the destination 0.0.0.0/0 and the NextHopType set to Internet. This route directs internet-bound traffic from the subnet to the IGW.
Public IP Addresses: Resources in a public subnet typically have a public IP address assigned to their Network Interface (NIC) or are part of a Load Balancer with a public IP address. This allows them to initiate outbound connections to the internet and receive inbound connections from the internet (if allowed by Network Security Groups).
How az vnet relates to public subnets:

Creating a VNet with an Internet Gateway (IGW): You first need to create an IGW in your VNet's region.


az network public-ip create --resource-group myResourceGroup --name myPublicIPForGW --allocation-method Static
az network vnet-gateway create --resource-group myResourceGroup --name myVNetGateway --location eastus --vnet myVNet --public-ip-address myPublicIPForGW --gateway-type Vpn --vpn-type RouteBased
(Note: While a VPN Gateway includes internet-facing components, a dedicated Internet Gateway resource doesn't exist as a standalone entity in Azure like it does in AWS. Internet connectivity is primarily managed through default outbound access or by associating public IPs and ensuring routing.)
Creating a Route Table with a Route to the Internet:


az network route-table create --resource-group myResourceGroup --name myPublicSubnetRouteTable --location eastus
az network route-table route create --resource-group myResourceGroup --route-table-name myPublicSubnetRouteTable --name default --address-prefix 0.0.0.0/0 --next-hop-type Internet
Associating the Route Table with the Subnet:


az network vnet subnet update --resource-group myResourceGroup --name myPublicSubnet --vnet-name myVNet --route-table myPublicSubnetRouteTable
Assigning Public IPs to Resources: You would then associate public IP addresses to the NICs of VMs or the frontend of Load Balancers within this subnet.


az network public-ip create --resource-group myResourceGroup --name myPublicIPForVM --allocation-method Static
az network nic ip-config update --resource-group myResourceGroup --nic-name myVMNic --name ipconfig1 --public-ip-address myPublicIPForVM
Private Subnet:

A subnet is generally considered "private" if it does not have a direct route to an Internet Gateway. Resources in a private subnet cannot directly initiate outbound connections to the public internet or receive inbound connections from it without additional configuration.

Key characteristics of a private subnet:

No Direct Route to Internet Gateway: The subnet's route table either doesn't have a 0.0.0.0/0 route pointing to the internet, or it directs that traffic to a different next hop, such as a Network Virtual Appliance (NVA) or an Azure NAT Gateway.
No Public IP Addresses (Typically): Resources in a private subnet usually do not have public IP addresses directly assigned to them.
Outbound Internet Access (Optional, via NAT): Resources in a private subnet can gain outbound internet access through:
Azure NAT Gateway: A fully managed and highly available Network Address Translation (NAT) service. You associate a NAT Gateway with the private subnet.


az network nat gateway create --resource-group myResourceGroup --name myNATGateway --location eastus --public-ip-addresses myPublicIPForNAT
az network vnet subnet update --resource-group myResourceGroup --name myPrivateSubnet --vnet-name myVNet --nat-gateway myNATGateway
Network Virtual Appliance (NVA): A VM acting as a firewall or proxy that routes traffic to the internet. You would create User-Defined Routes (UDRs) to direct internet-bound traffic to the NVA's private IP address.


az network route-table create --resource-group myResourceGroup --name myPrivateSubnetRouteTable --location eastus
az network route-table route create --resource-group myResourceGroup --route-table-name myPrivateSubnetRouteTable --name default --address-prefix 0.0.0.0/0 --next-hop-type VirtualAppliance --next-hop-ip-address <NVA_Private_IP>
az network vnet subnet update --resource-group myResourceGroup --name myPrivateSubnet --vnet-name myVNet --route-table myPrivateSubnetRouteTable
Inbound Access: Inbound access to resources in a private subnet from the internet typically requires a service like Azure Load Balancer or Azure Application Gateway, which have public IP addresses and forward traffic to the private IP addresses of the backend instances.
How az vnet relates to private subnets:

Creating a Subnet without a Default Internet Route: By default, Azure provides outbound internet access from all subnets. To make a subnet private, you need to override this default behavior.
Creating a Route Table without an Internet Route (or with a route to a NAT Gateway/NVA): As shown in the examples above, you create a route table that directs traffic differently than the internet.
Associating the Route Table with the Subnet: Use the az network vnet subnet update command to associate the custom route table with your private subnet.
Deploying Resources without Public IPs: When creating VMs or other resources in the private subnet, you would typically omit the --public-ip-address parameter during creation.

----------------------------------------------------------------
Segmenting VNets
----------------------------------------------------------------

In Azure, the distinction between a "public" and "private" subnet isn't a configuration setting you explicitly define with the az vnet subnet command. Instead, it's determined by the routing configuration associated with the subnet and whether resources within that subnet have a public IP address assigned to them.

Here's a breakdown of how to understand public vs. private subnets in the context of Azure and az vnet:

Public Subnet:

A subnet is generally considered "public" if it has a route to an Internet Gateway (IGW) associated with its Virtual Network (VNet). Resources in a public subnet can directly communicate with the public internet if they are also assigned a public IP address (either directly or through an associated Load Balancer).

Key characteristics of a public subnet:

Route to Internet Gateway: The subnet's route table contains a route with the destination 0.0.0.0/0 and the NextHopType set to Internet. This route directs internet-bound traffic from the subnet to the IGW.
Public IP Addresses: Resources in a public subnet typically have a public IP address assigned to their Network Interface (NIC) or are part of a Load Balancer with a public IP address. This allows them to initiate outbound connections to the internet and receive inbound connections from the internet (if allowed by Network Security Groups).
How az vnet relates to public subnets:

Creating a VNet with an Internet Gateway (IGW): You first need to create an IGW in your VNet's region.


az network public-ip create --resource-group myResourceGroup --name myPublicIPForGW --allocation-method Static
az network vnet-gateway create --resource-group myResourceGroup --name myVNetGateway --location eastus --vnet myVNet --public-ip-address myPublicIPForGW --gateway-type Vpn --vpn-type RouteBased
(Note: While a VPN Gateway includes internet-facing components, a dedicated Internet Gateway resource doesn't exist as a standalone entity in Azure like it does in AWS. Internet connectivity is primarily managed through default outbound access or by associating public IPs and ensuring routing.)
Creating a Route Table with a Route to the Internet:


az network route-table create --resource-group myResourceGroup --name myPublicSubnetRouteTable --location eastus
az network route-table route create --resource-group myResourceGroup --route-table-name myPublicSubnetRouteTable --name default --address-prefix 0.0.0.0/0 --next-hop-type Internet
Associating the Route Table with the Subnet:


az network vnet subnet update --resource-group myResourceGroup --name myPublicSubnet --vnet-name myVNet --route-table myPublicSubnetRouteTable
Assigning Public IPs to Resources: You would then associate public IP addresses to the NICs of VMs or the frontend of Load Balancers within this subnet.


az network public-ip create --resource-group myResourceGroup --name myPublicIPForVM --allocation-method Static
az network nic ip-config update --resource-group myResourceGroup --nic-name myVMNic --name ipconfig1 --public-ip-address myPublicIPForVM
Private Subnet:

A subnet is generally considered "private" if it does not have a direct route to an Internet Gateway. Resources in a private subnet cannot directly initiate outbound connections to the public internet or receive inbound connections from it without additional configuration.

Key characteristics of a private subnet:

No Direct Route to Internet Gateway: The subnet's route table either doesn't have a 0.0.0.0/0 route pointing to the internet, or it directs that traffic to a different next hop, such as a Network Virtual Appliance (NVA) or an Azure NAT Gateway.
No Public IP Addresses (Typically): Resources in a private subnet usually do not have public IP addresses directly assigned to them.
Outbound Internet Access (Optional, via NAT): Resources in a private subnet can gain outbound internet access through:
Azure NAT Gateway: A fully managed and highly available Network Address Translation (NAT) service. You associate a NAT Gateway with the private subnet.


az network nat gateway create --resource-group myResourceGroup --name myNATGateway --location eastus --public-ip-addresses myPublicIPForNAT
az network vnet subnet update --resource-group myResourceGroup --name myPrivateSubnet --vnet-name myVNet --nat-gateway myNATGateway
Network Virtual Appliance (NVA): A VM acting as a firewall or proxy that routes traffic to the internet. You would create User-Defined Routes (UDRs) to direct internet-bound traffic to the NVA's private IP address.


az network route-table create --resource-group myResourceGroup --name myPrivateSubnetRouteTable --location eastus
az network route-table route create --resource-group myResourceGroup --route-table-name myPrivateSubnetRouteTable --name default --address-prefix 0.0.0.0/0 --next-hop-type VirtualAppliance --next-hop-ip-address <NVA_Private_IP>
az network vnet subnet update --resource-group myResourceGroup --name myPrivateSubnet --vnet-name myVNet --route-table myPrivateSubnetRouteTable
Inbound Access: Inbound access to resources in a private subnet from the internet typically requires a service like Azure Load Balancer or Azure Application Gateway, which have public IP addresses and forward traffic to the private IP addresses of the backend instances.
How az vnet relates to private subnets:

Creating a Subnet without a Default Internet Route: By default, Azure provides outbound internet access from all subnets. To make a subnet private, you need to override this default behavior.
Creating a Route Table without an Internet Route (or with a route to a NAT Gateway/NVA): As shown in the examples above, you create a route table that directs traffic differently than the internet.
Associating the Route Table with the Subnet: Use the az network vnet subnet update command to associate the custom route table with your private subnet.
Deploying Resources without Public IPs: When creating VMs or other resources in the private subnet, you would typically omit the --public-ip-address parameter during creation.

----------------------------------------------------------------
IP Address Ranges within Subnets
----------------------------------------------------------------


When working with Azure Virtual Networks (VNets) and subnets using the Azure CLI (az network vnet subnet commands), you need to define the IP address range for both the VNet and each subnet within it. Here's a breakdown of how this works:

1. VNet IP Address Space
When you create a VNet using az network vnet create, you specify one or more contiguous private IP address prefixes using the --address-prefixes parameter.
These prefixes define the overall IP address space for your VNet.
Azure recommends using private IP address ranges defined in RFC 1918 (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) or the shared address space in RFC 6598 (100.64.0.0/10).
The address prefixes must not overlap with each other or with other VNets or on-premises networks you intend to connect to.
You can add up to four additional non-overlapping CIDR address ranges to an existing VNet after creation using az network vnet update --address-prefixes.
Example:



az network vnet create \
    --resource-group myResourceGroup \
    --name myVNet \
    --address-prefixes 10.0.0.0/16 192.168.0.0/24 \
    --location eastus
2. Subnet IP Address Ranges
When you create a subnet within a VNet using az network vnet subnet create, you define its IP address range using the --address-prefixes parameter.
The address range you specify for a subnet must be within one of the address prefixes defined for the VNet.
Subnet address ranges must be unique within the VNet and cannot overlap with other subnets.
Azure reserves the first four and the last IP addresses within each subnet for its internal use (network address, gateway, Azure DNS IPs, broadcast address). These addresses are not available for assignment to resources.
Example:

Assuming myVNet has the address prefix 10.0.0.0/16:



az network vnet subnet create \
    --resource-group myResourceGroup \
    --vnet-name myVNet \
    --name webSubnet \
    --address-prefixes 10.0.1.0/24

az network vnet subnet create \
    --resource-group myResourceGroup \
    --vnet-name myVNet \
    --name dbSubnet \
    --address-prefixes 10.0.2.0/24
3. Managing Subnet Address Ranges with az vnet subnet
Creating a subnet with an address range: Use az network vnet subnet create with the --address-prefixes parameter.
Listing subnet address range: Use az network vnet subnet show with the --query addressPrefix (for the primary prefix) or --query addressPrefixes (if multiple prefixes are enabled).
Updating subnet address range: Use az network vnet subnet update with the --address-prefixes parameter. If the subnet contains resources, you might need to move or delete them before changing the address range.
Adding multiple address prefixes to a subnet: This is a newer feature that might require enabling a feature flag for your subscription. Use az network vnet subnet update --address-prefixes with a space-separated list of prefixes. Ensure all prefixes are within the VNet's address space and don't overlap.
4. Subnet Size and Usable IPs
The size of a subnet is defined by its CIDR prefix. A /24 subnet has 256 total IP addresses, while a /27 subnet has 32, and so on.
Remember that Azure reserves five IP addresses in each subnet. Therefore, the number of usable IP addresses in a subnet is the total number of addresses minus five.
Example:

/24 subnet (256 addresses) = 251 usable IP addresses
/27 subnet (32 addresses) = 27 usable IP addresses
Important Considerations
Plan your IP address ranges carefully considering your current and future needs. It's generally easier to start with larger ranges than to try and modify them later.
Ensure non-overlapping address spaces for VNets and subnets to avoid routing issues.
Be aware of the Azure reserved IP addresses within each subnet when planning the size of your subnets.
Some Azure services might have specific subnet size requirements or recommendations (e.g., Azure Firewall, Application Gateway).

----------------------------------------------------------------
Subnet Association with Resources
----------------------------------------------------------------

Subnet association with resources in Azure is a fundamental concept for network organization, security, and communication within a Virtual Network (VNet). When you deploy an Azure resource that requires network connectivity, you must associate it with a specific subnet within a VNet.

Here's a breakdown of how subnet association works and why it's important:

How Resources are Associated with Subnets:

During Resource Creation: When you create a network-dependent Azure resource (like a Virtual Machine, Azure Kubernetes Service (AKS) node, Azure App Service Environment instance, Network Interface Card (NIC), etc.), one of the configuration steps involves selecting the VNet and then the specific subnet within that VNet where the resource will be deployed.
Network Interface (NIC): For many compute resources (like VMs), the association happens at the level of the Network Interface Card (NIC). The NIC is connected to a subnet, and the VM uses that NIC for network communication. A VM can have multiple NICs, each associated with a different subnet (within the same VNet).
Service-Specific Association: Some Azure services have their own mechanisms for subnet association. For example:
AKS: The nodes of an AKS cluster are deployed into subnets within a VNet. You typically specify a subnet for the node pool.
Azure App Service Environment (ASE): An ASE is deployed into a dedicated subnet within a VNet.
Azure Load Balancer: While the Load Balancer itself isn't directly in a subnet, its backend pool instances (VMs) are in subnets within the same VNet or peered VNets.
Azure Application Gateway: The Application Gateway is deployed into a dedicated subnet.
Azure Firewall: An Azure Firewall is deployed into a dedicated subnet (often named AzureFirewallSubnet).
Private Endpoints: A private endpoint is created within a specific subnet in your VNet and represents a private IP address for an Azure service.
What Happens When a Resource is Associated with a Subnet:

Private IP Address Allocation: The resource (or its associated NIC) is assigned a private IP address from the IP address range of the subnet it's connected to. Azure automatically manages the allocation of these private IP addresses. You can often specify a static private IP address if needed.
Network Communication: Resources within the same subnet can communicate directly with each other using their private IP addresses without any additional configuration.
Subnet-Level Security: The Network Security Group (NSG) associated with the subnet controls the inbound and outbound traffic for all resources connected to that subnet (unless a more specific NSG is applied at the NIC level).
Subnet-Level Routing: The Route Table associated with the subnet determines how outbound traffic from the resources in that subnet is routed. This allows you to control the next hop for traffic destined for different networks (e.g., the internet, other VNets, on-premises).
Service Endpoints: If Service Endpoints are enabled on a subnet for a specific Azure service, resources in that subnet can securely access that service over the Azure backbone network without requiring public IP addresses.
Private Endpoints: Resources in a subnet containing a private endpoint can securely access the target Azure service using the private IP address allocated to the endpoint within that subnet.
Why Subnet Association is Important:

Network Organization: Subnets provide a logical way to organize your Azure resources based on their function, application tier, security requirements, or environment.
Security Control: Applying NSGs at the subnet level provides a consistent security posture for a group of related resources. This simplifies security management compared to managing individual firewall rules on each resource.
Traffic Management: Route Tables associated with subnets allow you to control the flow of network traffic, enabling scenarios like forcing traffic through network appliances (firewalls, NVAs) for inspection.
Isolation: Subnets create network boundaries. By default, resources in different subnets within the same VNet need explicit rules (in NSGs) to communicate with each other.
Integration with Azure Services: Many Azure services have specific requirements or best practices related to subnet association for proper functionality and security.
Tools for Managing Subnet Associations:

You typically configure subnet associations when you create the Azure resource using:

Azure Portal: During the resource creation wizard, you'll be prompted to select the VNet and subnet.
Azure CLI: Most resource creation commands (e.g., az vm create, az aks create) have parameters to specify the --vnet-name and --subnet. For NICs, you use az network nic create or az network nic ip-config create with subnet information.
Azure PowerShell: Similar to the CLI, PowerShell cmdlets for resource creation (e.g., New-AzVM, New-AzAksCluster) have parameters for specifying virtual network and subnet configurations.
Azure Resource Manager (ARM) Templates or Bicep: When defining your infrastructure as code, you specify the subnet ID as a property of the network-dependent resources.

----------------------------------------------------------------
System Reserved IP Addresses in Subnets
----------------------------------------------------------------

In Azure Virtual Networks (VNets), when you create a subnet, Azure automatically reserves a small number of IP addresses within that subnet's address range for its own internal use. These system-reserved IP addresses cannot be assigned to your resources (like Virtual Machines).

Understanding these reserved IPs is crucial for properly planning your subnet sizes to ensure you have enough usable IP addresses for your workloads.

Azure reserves a total of 5 IP addresses within each subnet:

Network Address: The first IP address in the subnet range. It's used to identify the subnet itself. For example, in the subnet 10.0.1.0/24, the network address is 10.0.1.0.

Default Gateway: The second IP address in the subnet range. This IP address is used as the default gateway for resources within the subnet to communicate with resources outside the subnet (e.g., in other subnets within the VNet, to the internet, or to peered VNets). For the 10.0.1.0/24 subnet, the default gateway would be 10.0.1.1.

Azure DNS IP Addresses: The third and fourth IP addresses in the subnet range are reserved by Azure to map to the IP addresses of Azure DNS resolvers. In the 10.0.1.0/24 subnet, these would be 10.0.1.2 and 10.0.1.3. Azure provides DNS services to all resources within your VNet, and these reserved IPs are part of that infrastructure.

 Broadcast Address: The last IP address in the subnet range. It's used for sending broadcast messages within the subnet. For the 10.0.1.0/24 subnet, the broadcast address is 10.0.1.255. However, it's important to note that broadcast communication is limited within Azure VNets for performance and security reasons.

Example:

Consider a subnet with the address range 192.168.1.0/24 (256 total IP addresses). The following IP addresses are reserved by Azure:

192.168.1.0: Network address
192.168.1.1: Default gateway
192.168.1.2: Azure DNS IP
192.168.1.3: Azure DNS IP
192.168.1.255: Broadcast address
Therefore, in a /24 subnet, you have 251 usable IP addresses for your Azure resources.

Implications for Subnet Sizing:

When you plan the size of your subnets, you must account for these five reserved IP addresses. Ensure that your chosen subnet size (defined by the CIDR prefix) provides enough usable IP addresses for the number of resources you intend to deploy in that subnet.

For example, if you need to deploy 10 virtual machines in a subnet, a /28 subnet (which provides 16 total IPs and 11 usable IPs) would be sufficient. However, for a larger deployment of, say, 200 VMs, you would need a larger subnet, such as a /24.

Using az to view subnet information:

You can use the Azure CLI (az) to view the address prefixes of your subnets, which helps in understanding the total and therefore the usable IP addresses.



az network vnet subnet show \
    --resource-group <resource_group_name> \
    --vnet-name <vnet_name> \
    --name <subnet_name> \
    --query addressPrefix

----------------------------------------------------------------
Creating and Managing VNets and Subnets
----------------------------------------------------------------




Creating and managing Azure Virtual Networks (VNets) and their constituent subnets is a fundamental skill for anyone working with Azure. Here's a breakdown of how to perform these tasks using the Azure portal and the Azure CLI (az).

I. Using the Azure Portal:

A. Creating a VNet:

Sign in to the Azure Portal: Go to https://portal.azure.com and log in with your Azure account.
Search for "Virtual networks": In the search bar at the top, type "Virtual networks" and select it from the results.
Click "+ Create": On the Virtual networks overview page, click the "+ Create" button.
Configure the VNet:
Subscription: Select the Azure subscription where you want to create the VNet.
Resource Group: Choose an existing resource group or create a new one.
Name: Enter a descriptive name for your VNet.
Region: Select the Azure region where you want to deploy the VNet.
IP address space: Define the initial private IP address range for your VNet in CIDR notation (e.g., 10.0.0.0/16). You can add more address spaces later.
Subnet: Azure will automatically suggest a default subnet. You can edit its name and address range here or remove it and create subnets later.
Click "Review + create": Review your configuration.
Click "Create": Once validation passes, click "Create" to deploy the VNet.
B. Creating a Subnet within a VNet:

Navigate to your VNet: In the Azure portal, search for and select "Virtual networks," then click on the VNet where you want to create a subnet.
Click "Subnets": In the left-hand menu, under "Settings," click on "Subnets."
Click "+ Subnet": At the top of the Subnets page, click the "+ Subnet" button.
Configure the Subnet:
Name: Enter a descriptive name for your subnet.
Address range (CIDR block): Define the IP address range for this subnet within the VNet's address space (e.g., 10.0.1.0/24). This range must not overlap with other subnets in the VNet.
Network security group: You can associate an existing NSG or create a new one.
Route table: You can associate an existing route table or leave it as default.
Service endpoints (optional): Configure service endpoints for secure access to Azure services.
Subnet delegation (optional): Delegate control of the subnet to an Azure service.
Click "Save": Once you've configured the subnet, click "Save."
C. Managing VNets:

Navigate to your VNet: In the Azure portal, search for and select "Virtual networks," then click on the VNet you want to manage.
Explore the left-hand menu:
Overview: Provides a summary of the VNet.
Address space: View and add additional IP address ranges to the VNet.
Connected devices: Shows resources connected to the VNet.
Subnets: Manage existing subnets (add, delete, modify).
Peering: Configure VNet peering to connect to other VNets.
DNS servers: Configure custom DNS servers for the VNet.
Security: View associated Network Security Groups.
Routes: View associated Route Tables.
Service endpoints: Manage configured service endpoints.
Properties: View and modify basic properties of the VNet.
Locks: Manage resource locks to prevent accidental deletion or modification.
Tags: Apply tags for organization and billing.
Make necessary changes: Click on the relevant menu item and modify the configurations as needed. Remember to save your changes.
D. Managing Subnets:

Navigate to your VNet: In the Azure portal, search for and select "Virtual networks," then click on the VNet containing the subnet you want to manage.
Click "Subnets": In the left-hand menu, under "Settings," click on "Subnets."
Select the subnet: Click on the name of the subnet you want to manage.
View and modify settings:
Name: You can change the name of the subnet.
Address range (CIDR block): You can modify the address range only if the subnet is empty (contains no associated resources).
Network security group: Associate or disassociate an NSG.
Route table: Associate or disassociate a route table.
Service endpoints: Add or remove service endpoints.
Subnet delegation: Configure or modify subnet delegation.
Click "Save": After making changes, click "Save."
Deleting a Subnet: Select the subnet and click "Delete" at the top. You can only delete a subnet if it contains no associated resources.
II. Using the Azure CLI (az):

A. Creating a VNet:



az network vnet create \
    --resource-group <resource_group_name> \
    --name <vnet_name> \
    --address-prefixes <address_prefix> \
    --location <location> \
    --subnet-name <subnet_name> \
    --subnet-prefixes <subnet_prefix>
<resource_group_name>: The name of the resource group.
<vnet_name>: The desired name for your VNet.
<address_prefix>: The initial IP address space for the VNet (e.g., 10.0.0.0/16). You can specify multiple space-separated prefixes.
<location>: The Azure region (e.g., eastus).
<subnet_name>: The name for the initial subnet created within the VNet.
<subnet_prefix>: The IP address range for the initial subnet (must be within the VNet's address space, e.g., 10.0.1.0/24).
Example:



az network vnet create \
    --resource-group myNetworkRG \
    --name myNewVNet \
    --address-prefixes 10.0.0.0/16 \
    --location eastus \
    --subnet-name default \
    --subnet-prefixes 10.0.0.0/24
B. Creating a Subnet within an Existing VNet:



az network vnet subnet create \
    --resource-group <resource_group_name> \
    --vnet-name <vnet_name> \
    --name <subnet_name> \
    --address-prefixes <subnet_prefix> \
    [--network-security-group <nsg_name>] \
    [--route-table <route_table_name>] \
    [--delegations <delegation_list>] \
    [--service-endpoints <endpoint_list>]
<resource_group_name>: The name of the resource group containing the VNet.
<vnet_name>: The name of the VNet.
<subnet_name>: The desired name for the new subnet.
<subnet_prefix>: The IP address range for the new subnet (must be within the VNet's address space and not overlap).
[--network-security-group <nsg_name>]: Name of an existing NSG to associate.
[--route-table <route_table_name>]: Name of an existing route table to associate.
[--delegations <delegation_list>]: Space-separated list of service delegations (e.g., Microsoft.Web/serverFarms).
[--service-endpoints <endpoint_list>]: Space-separated list of service endpoints (e.g., Microsoft.Storage, Microsoft.Sql).
Example:



az network vnet subnet create \
    --resource-group myNetworkRG \
    --vnet-name myNewVNet \
    --name webSubnet \
    --address-prefixes 10.0.1.0/24 \
    --network-security-group myWebAppNSG
C. Managing VNets:

List VNets in a resource group:


az network vnet list --resource-group <resource_group_name> --output table
Show details of a specific VNet:


az network vnet show --resource-group <resource_group_name> --name <vnet_name> --output json
Update VNet address prefixes:


az network vnet update --resource-group <resource_group_name> --name <vnet_name> --address-prefixes <address_prefix1> <address_prefix2>
Delete a VNet (must have no associated resources):


az network vnet delete --resource-group <resource_group_name> --name <vnet_name> --yes
D. Managing Subnets:

List subnets in a VNet:


az network vnet subnet list --resource-group <resource_group_name> --vnet-name <vnet_name> --output table
Show details of a specific subnet:


az network vnet subnet show --resource-group <resource_group_name> --vnet-name <vnet_name> --name <subnet_name> --output json
Update a subnet (e.g., associate/disassociate NSG or route table):


az network vnet subnet update --resource-group <resource_group_name> --vnet-name <vnet_name> --name <subnet_name> --network-security-group <nsg_name>
az network vnet subnet update --resource-group <resource_group_name> --vnet-name <vnet_name> --name <subnet_name> --route-table <route_table_name>
Update subnet address prefixes (requires the Subnet feature flag to be enabled for your subscription):


az network vnet subnet update --resource-group <resource_group_name> --vnet-name <vnet_name> --name <subnet_name> --address-prefixes <subnet_prefix1> <subnet_prefix2>
Delete a subnet (must have no associated resources):


az network vnet subnet delete --resource-group <resource_group_name> --vnet-name <vnet_name> --name <subnet_name> --yes

----------------------------------------------------------------
Typical production cluster setup.
----------------------------------------------------------------

A typical production cluster setup in Azure, particularly when using Azure Kubernetes Service (AKS), involves careful planning across several key areas to ensure reliability, scalability, security, and cost-effectiveness. Here's a breakdown of the common components and considerations:

1. Virtual Network (VNet) and Subnets:
Dedicated VNet: It's best practice to deploy your production cluster into its own dedicated VNet to provide isolation from other environments (dev, staging) and potentially other applications.
Multiple Subnets: You'll typically need at least two subnets:
Node Pool Subnet(s): This is where your worker nodes will reside. For better availability and scalability, you might have multiple node pools spread across different subnets or availability zones.
Service Subnet: Some services like Azure Application Gateway and Azure Firewall might require their own dedicated subnets.

Sufficient IP Address Space: Plan your VNet and subnet IP ranges carefully, considering the potential growth of your cluster (number of nodes, pods, services with IPs). Using a CIDR range that is too small can lead to IP address exhaustion.
Network Policies: Enable and configure Azure Network Policies or Calico Network Policies to control the traffic flow between pods and namespaces within the cluster, enhancing security.
2. Azure Kubernetes Service (AKS) Cluster Configuration:
Production-Ready Kubernetes Version: Use a stable and supported Kubernetes version. Regularly plan for upgrades to newer stable versions to benefit from new features and security patches.
Multiple Node Pools: Utilize multiple node pools to:
Isolate Workloads: Run different types of workloads on nodes with specific configurations (e.g., different VM sizes, OS types, taints, and labels).
Improve Availability: Distribute nodes across availability zones within a region.
Cost Optimization: Use different VM sizes based on the resource requirements of the workloads.
Autoscaling: Enable both Horizontal Pod Autoscaler (HPA) for scaling pods based on metrics like CPU and memory utilization, and Cluster Autoscaler (CA) to automatically adjust the number of nodes in your node pools based on the pending pods.
Availability Zones: Deploy your node pools across multiple availability zones within an Azure region to protect against datacenter-level failures.
Managed Identities: Use Azure Managed Identities for your AKS cluster and applications to securely access other Azure resources (like Azure Container Registry, Key Vault, etc.) without managing credentials within the cluster.
RBAC (Role-Based Access Control): Enable both Kubernetes RBAC and Azure RBAC for fine-grained control over who can access the Kubernetes API server and Azure resources related to the AKS cluster. Integrate with Microsoft Entra ID for centralized identity management.
Private Cluster: For enhanced security, consider deploying a private AKS cluster where the control plane (API server) is only accessible within your private network. You can use Private Link for secure access.
Network Plugin: Choose the appropriate network plugin (Azure CNI or Kubenet) based on your network requirements. Azure CNI provides more advanced networking features and integration with Azure networking.
Add-ons: Utilize relevant AKS add-ons like the HTTP application routing, monitoring, and Azure Policy for AKS to extend the cluster's capabilities and enforce security and compliance.
3. Security:
Network Security Groups (NSGs): Apply NSGs at the subnet level to control inbound and outbound traffic to your worker nodes and other resources within the VNet. Limit access to only necessary ports and protocols.
Azure Firewall: For more advanced network security, consider using Azure Firewall to control egress traffic from your cluster and implement network-level threat protection.
Azure Defender for Cloud: Enable Azure Defender for Cloud for AKS to get security recommendations and threat detection for your Kubernetes environment.
Container Security: Implement security best practices for your container images, including vulnerability scanning, minimal base images, and running as non-root users. Use Azure Container Registry (ACR) with private access and enable content trust.
Secrets Management: Use Azure Key Vault to securely store and manage sensitive information like API keys and connection strings. Integrate AKS with Key Vault using the Secrets Store CSI driver.
Pod Security Policies/Admission Controllers: Implement Pod Security Policies (deprecated in newer Kubernetes versions, consider using Admission Controllers like OPA Gatekeeper or Azure Policy for Kubernetes) to enforce security standards for your pods.
4. Storage:
Azure Managed Disks: Use Azure Managed Disks for persistent volumes to provide reliable and scalable storage for your stateful applications. Consider using Premium SSD for production workloads requiring high performance.
Azure Files: For shared storage needs, Azure Files can be mounted as volumes in your pods.
Storage Classes: Define appropriate Storage Classes to dynamically provision storage based on your application requirements.
5. Load Balancing and Ingress:
Azure Load Balancer (Standard SKU): AKS typically uses Azure Load Balancer (Standard SKU is recommended for production) to distribute external traffic to your services exposed via LoadBalancer type.
Azure Application Gateway: For advanced HTTP/HTTPS traffic management, including SSL termination, WAF (Web Application Firewall), and routing rules, deploy Azure Application Gateway and use the Ingress controller (e.g., Nginx, Traefik) to manage ingress rules and route traffic to your applications within the cluster.
6. Monitoring and Logging:
Azure Monitor for Containers: Enable Azure Monitor for Containers to collect performance metrics, logs, and events from your AKS cluster and containers.
Azure Log Analytics Workspace: Store and analyze your AKS logs in a dedicated Azure Log Analytics Workspace.
Alerting: Set up alerts in Azure Monitor to proactively notify you of critical issues related to your cluster's health and performance.
Application Performance Monitoring (APM): Integrate an APM solution (e.g., Application Insights, Datadog, New Relic) to monitor the performance and health of your applications running in AKS.
7. Disaster Recovery and Business Continuity:
Multi-Region Deployment: For critical applications, consider deploying your AKS cluster and associated resources across multiple Azure regions.
Backup and Restore: Implement a strategy for backing up and restoring your application data and potentially your cluster configuration.
DR Testing: Regularly test your disaster recovery plan to ensure it works as expected.
8. Cost Management:
Right-Sizing: Choose appropriate VM sizes for your node pools based on your workload requirements.
Autoscaling: Properly configure HPA and CA to scale resources up and down based on demand, optimizing resource utilization and cost.
Reserved Instances: For predictable workloads, consider using Azure Reserved VM Instances for your node pools to save on compute costs.
Spot Instances: For non-critical workloads, Azure Spot Virtual Machines can provide significant cost savings.
Azure Cost Management: Use Azure Cost Management tools to monitor and analyze your AKS spending.
9. Infrastructure as Code (IaC):
ARM Templates/Bicep/Terraform: Define and deploy your AKS cluster and its dependencies using IaC tools for consistency, repeatability, and version control.


----------------------------------------------------------------

II. Network Components & Addressing
----------------------------------------------------------------
----------------------------------------------------------------
Network Interface (NIC)
----------------------------------------------------------------

A Network Interface (NIC), also known as a network adapter, LAN adapter, or physical network interface, is a hardware component that connects a device (like a computer, server, or virtual machine) to a computer network. It acts as the intermediary between the device's operating system and the physical network medium (like Ethernet cable or wireless radio waves).

Think of a NIC as the doorway through which your device can communicate with the network. It handles the physical and data-link layer (Layer 1 and Layer 2 of the OSI model) functions necessary for sending and receiving network traffic.

Here's a breakdown of its key functions and aspects:

Key Functions of a Network Interface (NIC):

Physical Connection: Provides the physical port or antenna to connect to the network medium. This could be an Ethernet port (RJ45 connector), a Wi-Fi antenna, a fiber optic connector, etc.
Data Transmission and Reception: Converts the digital data generated by the device into signals that can be transmitted over the network medium and vice versa.
Data Encapsulation and Decapsulation:
Encapsulation (Outgoing): Takes the data from the device's operating system, adds network layer (e.g., IP) and data-link layer (e.g., Ethernet) headers and trailers, forming a frame that can be transmitted over the network. This includes adding source and destination MAC addresses.
Decapsulation (Incoming): Receives frames from the network, checks the destination MAC address to see if it's intended for the device, and then removes the data-link layer headers and trailers, passing the network layer packet up to the operating system.
Media Access Control (MAC) Addressing: Each physical NIC has a unique 48-bit hardware address called the MAC address. This address is used for Layer 2 (data-link layer) communication within the local network segment.
Buffering: NICs often have a small amount of onboard memory (buffer) to temporarily store incoming and outgoing data frames, helping to manage differences in data rates between the device and the network.
Flow Control: Some NICs implement flow control mechanisms to prevent the sending device from overwhelming the receiving device with data.
Interrupt Handling: The NIC generates interrupts to signal the device's CPU when data has arrived or when transmission is complete, allowing the operating system to process network traffic efficiently.
Duplex Communication: Supports different communication modes (half-duplex or full-duplex) to allow for either one-way or simultaneous two-way communication.
Speed Negotiation: For wired connections, NICs can automatically negotiate the optimal communication speed (e.g., 10 Mbps, 100 Mbps, 1 Gbps, 10 Gbps) with the network switch or router.
Power Management: Modern NICs often support power management features to reduce energy consumption when the network is idle.
Types of Network Interfaces:

Physical NICs: These are physical hardware cards or integrated components within a device. Examples include:
Ethernet NICs: For wired connections using Ethernet cables.
Wireless NICs (Wi-Fi Adapters): For connecting to wireless networks.
Fiber Optic NICs: For high-speed connections over fiber optic cables.
Virtual NICs (vNICs): These are software-based network interfaces created by virtualization software (like Hyper-V, VMware, VirtualBox) or cloud platforms (like Azure, AWS, GCP). They allow virtual machines to connect to networks. A vNIC is logically associated with a physical NIC or a software bridge on the host machine.
Network Interface in Azure:

In Azure, a Network Interface (NIC) is a resource that enables a virtual machine (VM) to communicate with virtual network, the internet, and other resources. Key aspects of Azure NICs:

Association with a Subnet: A NIC is always associated with a specific subnet within an Azure Virtual Network (VNet).
Private IP Address: Each NIC is assigned one or more private IP addresses from the subnet's address range.
Public IP Address (Optional): You can optionally associate a public IP address with a NIC to allow inbound communication from the internet.
Network Security Group (NSG) Association: You can associate an NSG with a NIC to control the network traffic to and from the VM at the network interface level. NSG rules are evaluated based on the 5-tuple (source IP, destination IP, source port, destination port, protocol).
IP Configurations: A NIC can have multiple IP configurations, allowing a VM to have multiple private and public IP addresses.
MAC Address: Azure assigns a dynamic MAC address to the NIC of a stopped (deallocated) VM. The MAC address remains the same when the VM is running or stopped (allocated).
Virtual NICs: In the context of Azure, the term "NIC" primarily refers to these virtual network interfaces that connect Azure VMs to the network.

----------------------------------------------------------------
Association with Virtual Machines
----------------------------------------------------------------

In Azure, a Virtual Network Interface Card (vNIC), often simply referred to as a Network Interface (NIC), is the fundamental connection point for a Virtual Machine (VM) to communicate with a virtual network, the internet, and other resources. Think of it as the network adapter for your virtual machine.

Here's a breakdown of the association between vNICs and Virtual Machines in Azure:

1. One-to-Many Relationship:

Every Azure VM must have at least one vNIC associated with it. This is essential for the VM to be able to join and communicate on a virtual network.
A VM can have multiple vNICs attached to it, depending on the size and capabilities of the VM. This allows a VM to connect to multiple subnets within the same Virtual Network (VNet).
2. Association Process:

During VM Creation: When you create a new VM in Azure, the process typically involves creating one or more vNICs and associating them with the VM. You'll specify the VNet and subnet(s) that the vNIC(s) should connect to.
Adding vNICs to Existing VMs: You can add additional vNICs to an existing VM, provided the VM size supports it. The VM must be stopped (deallocated) to add or remove vNICs. The new vNIC must reside in the same Azure location and subscription as the VM and be connected to a VNet in the same location and subscription.
Removing vNICs from VMs: You can detach vNICs from a stopped (deallocated) VM. However, a VM must always have at least one vNIC attached.
3. Key Properties and Configurations of a vNIC:

When a vNIC is associated with a VM, it gets the following properties and configurations:

Association with a Subnet: The vNIC is linked to a specific subnet within a VNet. This determines the range of private IP addresses that can be assigned to the vNIC.
Private IP Address(es): Each vNIC is assigned one or more private IP addresses from the subnet's address range. You can choose between dynamic or static private IP address assignment.
Public IP Address (Optional): You can optionally associate a public IP address with a vNIC to enable inbound communication from the internet. A public IP address is a separate Azure resource and can be either dynamic or static.
Network Security Group (NSG): You can associate an NSG with the vNIC (or the subnet it's connected to) to control inbound and outbound network traffic to the VM. NSGs act as virtual firewalls.
IP Configurations: A vNIC can have multiple IP configurations, allowing the VM to have multiple private and public IP addresses. Each IP configuration has its own set of IP address assignments and can be associated with an NSG.
MAC Address: Azure assigns a MAC address to the vNIC once the VM is started. This MAC address remains the same across reboots and stops (allocated).
Application Security Groups (ASGs): You can associate a vNIC with one or more ASGs. ASGs allow you to group VMs and apply network security policies based on application workload rather than individual IP addresses.
Accelerated Networking (Optional): For supported VM types, you can enable accelerated networking on a vNIC for higher throughput and lower latency.
4. Importance of vNIC Association:

The association of vNICs with VMs is crucial for:

Network Connectivity: It enables the VM to communicate within the Azure VNet, with other Azure services, the internet, and on-premises networks (if a connection is established).
IP Addressing: It determines the private and potentially public IP addresses assigned to the VM.
Network Security: It allows you to apply network security rules (via NSGs) to control traffic at the VM level.
Load Balancing: For VMs in a load balancer backend pool, the vNICs are the endpoints that receive traffic distributed by the load balancer. 
----------------------------------------------------------------
Private and Public IP Addresses
----------------------------------------------------------------
----------------------------------------------------------------
Network Security Group (NSG) Association
----------------------------------------------------------------

In Azure, a Network Security Group (NSG) provides stateful filtering of network traffic to and from Azure resources within a Virtual Network (VNet). An NSG contains security rules that allow or deny network traffic based on a 5-tuple:

Source IP address and port range
Destination IP address and port range
Protocol (TCP, UDP, ICMP, Any)
Direction (Inbound or Outbound)
NSGs can be associated with:

Subnets: When you associate an NSG with a subnet, the rules apply to all resources within that subnet.
Network Interfaces (NICs): When you associate an NSG with a NIC attached to a virtual machine (VM), the rules apply only to that specific VM's network traffic.
You can associate zero or one NSG to each subnet and zero or one NSG to each network interface. The same NSG can be associated with multiple subnets and NICs.

Order of NSG Rule Processing:

When network traffic flows to or from an Azure resource, the NSGs associated with the resource and its subnet are evaluated.

Inbound Traffic:
If there's an NSG associated with the subnet, its rules are processed first.
Then, if there's an NSG associated with the destination NIC, its rules are processed. Traffic is allowed if at least one "Allow" rule with a matching priority is encountered and no "Deny" rule with a higher or equal priority blocks the traffic.
Outbound Traffic:
If there's an NSG associated with the source NIC, its rules are processed first.
Then, if there's an NSG associated with the subnet, its rules are processed. Traffic is allowed if at least one "Allow" rule with a matching priority is encountered and no "Deny" rule with a higher or equal priority blocks the traffic.
Default Security Rules:

Every NSG contains a set of default rules that cannot be deleted but can be overridden by creating custom rules with higher priority. These default rules ensure basic connectivity within the VNet and to the internet:

Inbound:

AllowVNetInBound: Allows all inbound traffic originating from within the same VNet.
AllowAzureLoadBalancerInBound: Allows health probes and traffic from Azure Load Balancers.
DenyAllInBound: Denies all other inbound traffic.
Outbound:

AllowVNetOutBound: Allows all outbound traffic destined for within the same VNet.
AllowInternetOutBound: Allows all outbound traffic to the internet.
DenyAllOutBound: Denies all other outbound traffic.
Creating and Managing NSG Associations:

You can associate and dissociate NSGs using the Azure Portal, Azure CLI, PowerShell, or ARM templates.

Using Azure Portal:

Navigate to the Subnet or Network Interface you want to associate the NSG with.
Under Settings, click on Network security group.
Click Associate and select the desired NSG from the dropdown.
To dissociate, click the "..." next to the associated NSG and select Dissociate.
Using Azure CLI:

Associate NSG to a Subnet:


az network vnet subnet update --resource-group <resource_group_name> --name <subnet_name> --vnet-name <vnet_name> --network-security-group <nsg_name_or_id>
Dissociate NSG from a Subnet:


az network vnet subnet update --resource-group <resource_group_name> --name <subnet_name> --vnet-name <vnet_name> --network-security-group ""
Associate NSG to a Network Interface:


az network nic update --resource-group <resource_group_name> --name <nic_name> --network-security-group <nsg_name_or_id>
Dissociate NSG from a Network Interface:


az network nic update --resource-group <resource_group_name> --name <nic_name> --network-security-group ""
Key Considerations:

Stateless vs. Stateful: NSGs are stateful for established connections. If you allow inbound traffic on a specific port, the corresponding outbound response traffic is automatically allowed, and vice versa.
Priority: Rules are processed in order of priority, with lower numbers having higher priority. Once a rule matches traffic, processing stops.
Security Best Practices: Follow the principle of least privilege when creating NSG rules. Only allow necessary traffic and deny everything else by default.
Service Tags: Use service tags (e.g., Internet, VirtualNetwork, AzureLoadBalancer, Storage) to simplify rule creation for common Azure services.
Application Security Groups (ASGs): Group VMs by application workload and reference ASGs in your NSG rules for easier management in dynamic environments.
Troubleshooting: Use Azure Network Watcher's IP flow verify and NSG flow logs to diagnose connectivity issues related to NSG rules.

----------------------------------------------------------------
IP Addressing in Azure
----------------------------------------------------------------

I. Types of IP Addresses in Azure:

Azure uses both private and public IP addresses to enable communication for your resources.

Private IP Addresses:

	Enable communication between resources within Azure Virtual Networks (VNets) and connected private networks (e.g., on-premises via VPN or ExpressRoute).
	Not directly routable over the public internet.
	Assigned from the address space of the subnet the resource is in.
	Can be assigned using either static or dynamic allocation.
	Resources with only private IP addresses can still communicate outbound to the internet using Azure's default outbound access or a Network Address Translation (NAT) gateway.
	Reserved IP Addresses: Azure reserves the first four and the last IP address in each subnet for its internal use. These cannot be assigned to resources.
Public IP Addresses:

	Allow inbound communication from the internet to Azure resources.
	Enable outbound communication from Azure resources to the internet and public-facing Azure services.
	Can be associated with various Azure resources like VMs, load balancers, application gateways, and VPN gateways.
	Can be either static or dynamically assigned.
	Have a SKU (Basic or Standard) that determines their capabilities and pricing. Standard SKU offers features like availability zones.
	Can be created as non-zonal, zonal, or zone-redundant (for Standard SKU in regions supporting availability zones).
	Have an optional DNS domain name label for name resolution.
II. IP Address Assignment Methods:

Both private and public IP addresses can be assigned using two methods:

Dynamic:

Azure assigns the next available IP address from the relevant pool (subnet for private, Azure region for public) when the resource is created or started.
Private IPs assigned dynamically remain associated with the resource until it's deleted.
Public IPs assigned dynamically are released when the associated resource is stopped or deleted (for VMs).
Dynamic public IPs are typically free when associated with a running VM in the Azure Resource Manager deployment model.
Static:

You manually choose and assign an available IP address from the relevant range.
Private IPs assigned statically remain associated with the network interface until it's deleted or reassigned to a different subnet.
Public IPs assigned statically are reserved and remain allocated to your subscription until you explicitly unassign them, even if the associated resource is stopped or deleted. You are billed for static public IPs even when the associated VM is stopped (deallocated) in the ARM deployment model.
Static public IPs are useful for scenarios requiring a persistent IP address, like DNS records or firewall rules.
III. IP Addressing for Specific Azure Resources:

Virtual Machines (VMs):

Each VM has at least one Network Interface Card (NIC) associated with it.
The NIC is assigned one or more private IP addresses from the connected subnet.
A NIC can optionally have one or more public IP addresses associated with it.
Load Balancers:

Internal Load Balancers (ILBs): Are assigned a private IP address from the VNet. This serves as the internal endpoint for the load-balanced resources.
Public Load Balancers: Are associated with one or more public IP addresses (the frontend IP). They distribute incoming public traffic to the backend instances (VMs).
Application Gateways:

Are deployed into a subnet and have a private IP address within that subnet.
Can also be associated with one or more public IP addresses for accepting internet traffic.
Private Endpoints:

Use a private IP address from your VNet to connect privately and securely to Azure services. This brings the service directly into your VNet.
IV. Azure Virtual Network Address Ranges:

When creating a VNet, you specify one or more private IP address ranges. Microsoft recommends using the ranges defined in RFC 1918 (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16) or the shared address space in RFC 6598 (100.64.0.0/10).
You cannot add the following ranges: 224.0.0.0/4 (multicast), 255.255.255.255/32 (broadcast), 127.0.0.0/8 (loopback), 169.254.0.0/16 (link-local), and 168.63.129.16/32 (internal DNS).
V. Subnet IP Address Ranges:

Subnets are created within a VNet and are assigned a portion of the VNet's address space.
Subnet address ranges must be contiguous and not overlap with other subnets within the same VNet.
Azure reserves five IP addresses within each subnet for its internal use.
VI. Limits:

Azure has limits on the number of public and private IP addresses you can use per subscription and per network interface. These limits vary based on the offer type. You can find detailed limits in the Azure documentation.
For example, by default, there's a limit on the number of public IP addresses per subscription. Contact support to increase these limits if needed.
VII. Managing IP Addresses:

You can manage IP addresses in Azure using:

Azure Portal: A graphical user interface for creating, viewing, modifying, associating, and disassociating IP addresses.
Azure CLI: Command-line tool for managing Azure resources, including IP addresses. Use commands under az network public-ip and az network nic ip-config.
Azure PowerShell: PowerShell cmdlets for managing Azure resources. Use cmdlets like Get-AzPublicIpAddress, New-AzPublicIpAddress, Set-AzNetworkInterfaceIpConfig.
ARM Templates/Bicep: Infrastructure-as-Code tools to define and deploy IP address configurations.


----------------------------------------------------------------
Private IP Addresses (Dynamic and Static)
----------------------------------------------------------------
done above 
----------------------------------------------------------------
Public IP Addresses (Dynamic and Static, Basic and Standard SKUs)
----------------------------------------------------------------

continue from here 
----------------------------------------------------------------

III. Subnetting Best Practices
----------------------------------------------------------------
----------------------------------------------------------------
Planning IP Address Spaces
----------------------------------------------------------------
----------------------------------------------------------------
Determining Subnet Sizes
----------------------------------------------------------------
----------------------------------------------------------------
Network Segmentation for Security and Management
----------------------------------------------------------------
----------------------------------------------------------------
Considerations for Azure Services (e.g., Azure Kubernetes Service, Azure App Service Environment)
----------------------------------------------------------------
----------------------------------------------------------------
IV. Network Security
----------------------------------------------------------------
----------------------------------------------------------------

Introduction to Network Security in Azure
----------------------------------------------------------------
----------------------------------------------------------------
Defense in Depth Strategy
----------------------------------------------------------------
----------------------------------------------------------------
V. Network Security Groups (NSG)
----------------------------------------------------------------
----------------------------------------------------------------

Introduction to Network Security Groups (NSGs)
----------------------------------------------------------------
----------------------------------------------------------------
Definition and Functionality
----------------------------------------------------------------
----------------------------------------------------------------
Inbound and Outbound Security Rules
----------------------------------------------------------------
----------------------------------------------------------------
Rule Priority and Evaluation
----------------------------------------------------------------
----------------------------------------------------------------
Source and Destination (IP Addresses, Service Tags, Application Security Groups)
----------------------------------------------------------------
----------------------------------------------------------------
Ports and Protocols
----------------------------------------------------------------
----------------------------------------------------------------

Default Security Rules
----------------------------------------------------------------
----------------------------------------------------------------
Creating and Managing NSGs and Security Rules
----------------------------------------------------------------
----------------------------------------------------------------

VNet Peering
----------------------------------------------------------------
----------------------------------------------------------------
Connecting VNets within the Same or Different Azure Regions
----------------------------------------------------------------
----------------------------------------------------------------
Non-Transitive Nature of Peering
----------------------------------------------------------------
----------------------------------------------------------------
Configuring VNet Peering
----------------------------------------------------------------
----------------------------------------------------------------
Considerations for Planning Peering
----------------------------------------------------------------
----------------------------------------------------------------

Introduction to Hybrid cloud approaches (theory only)
----------------------------------------------------------------
----------------------------------------------------------------

Azure VPN Gateway
----------------------------------------------------------------
----------------------------------------------------------------
Express route
----------------------------------------------------------------
----------------------------------------------------------------
Azure Hybrid services"
----------------------------------------------------------------
----------------------------------------------------------------
"Virtual Machine Types & SKUs
----------------------------------------------------------------
----------------------------------------------------------------
VM Sizing & Pricing
----------------------------------------------------------------
----------------------------------------------------------------
Reserved vs. Spot Instances
----------------------------------------------------------------
----------------------------------------------------------------
Managing Virtual Machines
----------------------------------------------------------------
----------------------------------------------------------------
Start, Stop, Resize, and Delete VMs
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
VM Auto-Scaling with Scale Sets
----------------------------------------------------------------
----------------------------------------------------------------
Disk Management
----------------------------------------------------------------
----------------------------------------------------------------
Managed vs. Unmanaged Disks
----------------------------------------------------------------
----------------------------------------------------------------
Encryption & Snapshots
----------------------------------------------------------------
----------------------------------------------------------------

1. Introduction to Azure Compute
----------------------------------------------------------------
----------------------------------------------------------------
	Overview of Compute Services in Azure
----------------------------------------------------------------
----------------------------------------------------------------
	Virtual Machines vs. App Services vs. Containers
----------------------------------------------------------------
----------------------------------------------------------------
	Understanding Regions, Availability Zones, and SLAs
----------------------------------------------------------------
----------------------------------------------------------------

2. Virtual Machine Types & SKUs
	General Purpose, Compute-Optimized, Memory-Optimized, Storage-Optimized, GPU VMs
----------------------------------------------------------------
----------------------------------------------------------------
	Choosing the Right VM SKU for Workloads
----------------------------------------------------------------
----------------------------------------------------------------


3. VM Sizing & Pricing
	How Azure Charges for Compute
----------------------------------------------------------------
----------------------------------------------------------------
	Understanding vCPUs, RAM, and Network Performance
----------------------------------------------------------------
----------------------------------------------------------------
	Cost Estimation with Azure Pricing Calculator
----------------------------------------------------------------
----------------------------------------------------------------


4. Reserved vs. Spot Instances
	Cost Savings with Reserved Instances
----------------------------------------------------------------
----------------------------------------------------------------
	Spot VMs for Interruptible Workloads
----------------------------------------------------------------
----------------------------------------------------------------
	When to Use Each Option
----------------------------------------------------------------
----------------------------------------------------------------


5. Managing Virtual Machines
----------------------------------------------------------------
----------------------------------------------------------------
	Creating, Starting, Stopping, Resizing, and Deleting VMs
----------------------------------------------------------------
----------------------------------------------------------------
	Assigning Static vs. Dynamic Public IPs
----------------------------------------------------------------
----------------------------------------------------------------
	Using Azure Bastion for Secure Access
----------------------------------------------------------------
----------------------------------------------------------------


6. VM Auto-Scaling with Scale Sets
----------------------------------------------------------------
----------------------------------------------------------------
	Introduction to Virtual Machine Scale Sets (VMSS)
----------------------------------------------------------------
----------------------------------------------------------------
	Auto-Scaling Rules and Load Balancers
----------------------------------------------------------------
----------------------------------------------------------------
	Configuring Autoscale Policies
----------------------------------------------------------------
----------------------------------------------------------------


7. Disk Management
----------------------------------------------------------------
----------------------------------------------------------------
	Types of Disks: OS, Data, and Temporary Disks
----------------------------------------------------------------
----------------------------------------------------------------
	Disk Performance: Standard HDD, Standard SSD, Premium SSD, Ultra Disks
----------------------------------------------------------------
----------------------------------------------------------------
	Attaching and Resizing Disks
----------------------------------------------------------------
----------------------------------------------------------------


8. Managed vs. Unmanaged Disks
----------------------------------------------------------------
----------------------------------------------------------------
	What are Managed Disks?
----------------------------------------------------------------
----------------------------------------------------------------
	Comparison of Managed and Unmanaged Disks
----------------------------------------------------------------
----------------------------------------------------------------
	Migration Strategies
----------------------------------------------------------------
----------------------------------------------------------------


9. Encryption & Snapshots
----------------------------------------------------------------
----------------------------------------------------------------
	Encrypting Disks using Azure Disk Encryption
----------------------------------------------------------------
----------------------------------------------------------------
	Taking Snapshots for Backup & Recovery
----------------------------------------------------------------
----------------------------------------------------------------
	Restoring VMs from Snapshots
----------------------------------------------------------------
----------------------------------------------------------------

10. Summary & Best Practices
----------------------------------------------------------------
----------------------------------------------------------------
	Cost Optimization Techniques
----------------------------------------------------------------
----------------------------------------------------------------
	Security Considerations for VMs
----------------------------------------------------------------
----------------------------------------------------------------
	Monitoring and Performance Tuning"
----------------------------------------------------------------
----------------------------------------------------------------
"Blob, File, Queue, Table Storage
----------------------------------------------------------------
----------------------------------------------------------------
Performance Tiers & Redundancy Options
----------------------------------------------------------------
----------------------------------------------------------------
Azure Blob Storage & Data Management
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
Hot, Cool, and Archive Tiers
----------------------------------------------------------------
----------------------------------------------------------------
Secure Blob Data with Shared Access Signatures (SAS) & RBAC
----------------------------------------------------------------
----------------------------------------------------------------
Azure Files & File Sync
----------------------------------------------------------------
----------------------------------------------------------------
Deploying Azure File Share
----------------------------------------------------------------
----------------------------------------------------------------
Syncing On-Prem to Azure
----------------------------------------------------------------
----------------------------------------------------------------

1. Introduction to Azure Storage
	Overview of Azure Storage Services
----------------------------------------------------------------
----------------------------------------------------------------
	Use Cases for Different Storage Types
----------------------------------------------------------------
----------------------------------------------------------------
	Storage Security and Compliance Considerations
----------------------------------------------------------------
----------------------------------------------------------------

2. Azure Storage Account Types
	General-Purpose v1 vs. General-Purpose v2 vs. Block Blob Storage
----------------------------------------------------------------
----------------------------------------------------------------
	Selecting the Right Storage Account for Different Workloads
----------------------------------------------------------------
----------------------------------------------------------------
	Understanding Account Limits and Performance
----------------------------------------------------------------
----------------------------------------------------------------


3. Azure Storage Services (Blob, File, Queue, Table)
	Blob Storage: Storing Unstructured Data (Images, Videos, Documents)
----------------------------------------------------------------
----------------------------------------------------------------
	File Storage: Managed File Shares for VMs and On-Prem Connectivity
----------------------------------------------------------------
----------------------------------------------------------------
	Queue Storage: Asynchronous Messaging System for Decoupled Apps
----------------------------------------------------------------
----------------------------------------------------------------
	Table Storage: NoSQL Key-Value Store for Fast Access
----------------------------------------------------------------
----------------------------------------------------------------

4. Performance Tiers & Redundancy Options
----------------------------------------------------------------
----------------------------------------------------------------
	Performance Tiers: Standard vs. Premium Storage
----------------------------------------------------------------
----------------------------------------------------------------
	Redundancy: LRS, ZRS, GRS, RA-GRS, GZRS, RA-GZRS
----------------------------------------------------------------
----------------------------------------------------------------
	How to Choose the Right Performance and Redundancy
----------------------------------------------------------------
----------------------------------------------------------------



5. Azure Blob Storage & Data Management
	Containers, Blobs, and Storage Structures
----------------------------------------------------------------
----------------------------------------------------------------
	Managing Blob Data with Azure Storage Explorer
----------------------------------------------------------------
----------------------------------------------------------------
	Blob Lifecycle Management and Versioning
----------------------------------------------------------------
----------------------------------------------------------------


6. Hot, Cool, and Archive Tiers
	Understanding Access Tiers and Cost Implications
----------------------------------------------------------------
----------------------------------------------------------------
	When to Use Each Tier
----------------------------------------------------------------
----------------------------------------------------------------
	Automating Tier Changes with Lifecycle Rules
----------------------------------------------------------------
----------------------------------------------------------------


7. Secure Blob Data with SAS & RBAC
	Understanding Shared Access Signatures (SAS)
----------------------------------------------------------------
----------------------------------------------------------------
	Configuring Role-Based Access Control (RBAC) for Storage
----------------------------------------------------------------
----------------------------------------------------------------
	Using Azure Key Vault for Secure Storage Access
----------------------------------------------------------------
----------------------------------------------------------------


8. Azure Files & File Sync
	Azure Files vs. Blob Storage – When to Use Each
----------------------------------------------------------------
----------------------------------------------------------------
	SMB and NFS File Shares in Azure
----------------------------------------------------------------
----------------------------------------------------------------
	Managing File Share Permissions and Quotas
----------------------------------------------------------------
----------------------------------------------------------------



9. Syncing On-Premises Data to Azure
	Introduction to Azure File Sync
----------------------------------------------------------------
----------------------------------------------------------------
	Installing and Configuring Azure File Sync Agent
----------------------------------------------------------------
----------------------------------------------------------------
	Hybrid Cloud Storage Architecture
----------------------------------------------------------------
----------------------------------------------------------------


10. Summary & Best Practices
	Cost Optimization Strategies for Azure Storage
----------------------------------------------------------------
----------------------------------------------------------------
	Security and Compliance Considerations
----------------------------------------------------------------
----------------------------------------------------------------
	Monitoring and Troubleshooting Storage Performance"
----------------------------------------------------------------
----------------------------------------------------------------
"I. Network Security Groups (NSGs)
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the purpose of Network Security Groups (NSGs).
----------------------------------------------------------------
----------------------------------------------------------------
NSG rules and their components (source, destination, port, protocol, priority).
----------------------------------------------------------------
----------------------------------------------------------------
Default and custom NSG rules.
----------------------------------------------------------------
----------------------------------------------------------------
Associating NSGs with subnets and network interfaces.
----------------------------------------------------------------
----------------------------------------------------------------
Troubleshooting NSG issues.
----------------------------------------------------------------
----------------------------------------------------------------
II. Augmented Security Rules (Application Security Groups - ASGs)
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the limitations of traditional NSGs.
----------------------------------------------------------------
----------------------------------------------------------------
Introduction to Application Security Groups (ASGs).
----------------------------------------------------------------
----------------------------------------------------------------
Creating and configuring ASGs.
----------------------------------------------------------------
----------------------------------------------------------------
Associating VMs with ASGs.
----------------------------------------------------------------
----------------------------------------------------------------
Using ASGs in NSG rules for application-centric security.
----------------------------------------------------------------
----------------------------------------------------------------
III. Azure Firewalls
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the purpose and benefits of Azure Firewall.
----------------------------------------------------------------
----------------------------------------------------------------
Azure Firewall features: threat intelligence, DNAT, SNAT, forced tunneling.
----------------------------------------------------------------
----------------------------------------------------------------
Deploying and configuring Azure Firewall.
----------------------------------------------------------------
----------------------------------------------------------------
Creating network and application rules for Azure Firewall.
----------------------------------------------------------------
----------------------------------------------------------------
Integrating Azure Firewall with NSGs and ASGs.
----------------------------------------------------------------
----------------------------------------------------------------
IV. Azure Bastion
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the purpose and benefits of Azure Bastion.
----------------------------------------------------------------
----------------------------------------------------------------
Deploying and configuring Azure Bastion.
----------------------------------------------------------------
----------------------------------------------------------------
Connecting to VMs using Azure Bastion.
----------------------------------------------------------------
----------------------------------------------------------------
Azure Bastion security considerations.
----------------------------------------------------------------
----------------------------------------------------------------
V. Configure Application Security Groups for Azure Virtual Networks
----------------------------------------------------------------
----------------------------------------------------------------

Deep dive into ASG configuration best practices.
----------------------------------------------------------------
----------------------------------------------------------------
Implementing granular application security using ASGs.
----------------------------------------------------------------
----------------------------------------------------------------
Securing multi-tier applications with ASGs.
----------------------------------------------------------------
----------------------------------------------------------------
Integrating ASGs with load balancers and application gateways.
----------------------------------------------------------------
----------------------------------------------------------------
Troubleshooting ASG configurations."
----------------------------------------------------------------
----------------------------------------------------------------
"I. Azure AD Application Security
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the importance of application security in Azure AD.
----------------------------------------------------------------
----------------------------------------------------------------
Registering applications in Azure AD.
----------------------------------------------------------------
----------------------------------------------------------------
Configuring application permissions and consent.
----------------------------------------------------------------
----------------------------------------------------------------
Implementing OAuth 2.0 and OpenID Connect for application authentication and authorization.
----------------------------------------------------------------
----------------------------------------------------------------
Using Azure AD roles for application access control.
----------------------------------------------------------------
----------------------------------------------------------------
Securing API access with Azure AD.
----------------------------------------------------------------
----------------------------------------------------------------
II. Azure AD Managed Identities
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the benefits of managed identities for Azure resources.
----------------------------------------------------------------
----------------------------------------------------------------
System-assigned vs. user-assigned managed identities.
----------------------------------------------------------------
----------------------------------------------------------------
Enabling and using managed identities for Azure VMs, App Services, and other resources.
----------------------------------------------------------------
----------------------------------------------------------------
Using managed identities for secure access to Azure services (e.g., Storage, Key Vault).
----------------------------------------------------------------
----------------------------------------------------------------
Best practices for managed identity usage.
----------------------------------------------------------------
----------------------------------------------------------------
III. Key Vault
----------------------------------------------------------------
----------------------------------------------------------------

Understanding Azure Key Vault for secure secret management.
----------------------------------------------------------------
----------------------------------------------------------------
Storing and retrieving secrets, keys, and certificates.
----------------------------------------------------------------
----------------------------------------------------------------
Controlling access to Key Vault using Azure RBAC and Key Vault access policies.
----------------------------------------------------------------
----------------------------------------------------------------
Integrating Key Vault with applications and Azure services.
----------------------------------------------------------------
----------------------------------------------------------------
Using Key Vault for application configuration and encryption.
----------------------------------------------------------------
----------------------------------------------------------------
"
----------------------------------------------------------------
----------------------------------------------------------------
"I. Azure Update Management
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the need for automated update management.
----------------------------------------------------------------
----------------------------------------------------------------
Configuring Azure Update Management for VMs.
----------------------------------------------------------------
----------------------------------------------------------------
Scheduling update deployments.
----------------------------------------------------------------
----------------------------------------------------------------
Viewing update compliance and reports.
----------------------------------------------------------------
----------------------------------------------------------------
Troubleshooting update issues.
----------------------------------------------------------------
----------------------------------------------------------------
II. Azure Backups
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the importance of data backup and recovery.
----------------------------------------------------------------
----------------------------------------------------------------
Configuring Azure Backup for VMs, databases, and files.
----------------------------------------------------------------
----------------------------------------------------------------
Creating backup policies and schedules.
----------------------------------------------------------------
----------------------------------------------------------------
Performing on-demand backups.
----------------------------------------------------------------
----------------------------------------------------------------
Restoring data from backups.
----------------------------------------------------------------
----------------------------------------------------------------
III. Azure Site Recovery (ASR)
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the purpose of disaster recovery.
----------------------------------------------------------------
----------------------------------------------------------------
Configuring Azure Site Recovery for VMs and physical servers.
----------------------------------------------------------------
----------------------------------------------------------------
Setting up replication and failover.
----------------------------------------------------------------
----------------------------------------------------------------
Performing test failovers and failovers.
----------------------------------------------------------------
----------------------------------------------------------------
Implementing recovery plans.
----------------------------------------------------------------
----------------------------------------------------------------
IV. Azure Migrate Overview
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the Azure Migrate service and its capabilities.
----------------------------------------------------------------
----------------------------------------------------------------
Planning and executing migrations using Azure Migrate.
----------------------------------------------------------------
----------------------------------------------------------------
Overview of assessment and migration tools.
----------------------------------------------------------------
----------------------------------------------------------------
Understanding the migration process.
----------------------------------------------------------------
----------------------------------------------------------------
V. Azure Migrate for Servers
----------------------------------------------------------------
----------------------------------------------------------------

Using Azure Migrate to assess and migrate on-premises servers to Azure.
----------------------------------------------------------------
----------------------------------------------------------------
Performing server discovery and assessment.
----------------------------------------------------------------
----------------------------------------------------------------
Migrating servers using agentless and agent-based methods.
----------------------------------------------------------------
----------------------------------------------------------------
Post-migration validation.
----------------------------------------------------------------
----------------------------------------------------------------
VI. Azure Migrate for Databases
----------------------------------------------------------------
----------------------------------------------------------------

Using Azure Migrate to assess and migrate on-premises databases to Azure.
----------------------------------------------------------------
----------------------------------------------------------------
Performing database discovery and assessment.
----------------------------------------------------------------
----------------------------------------------------------------
Migrating databases using Azure Database Migration Service (DMS).
----------------------------------------------------------------
----------------------------------------------------------------
Post-migration validation.
----------------------------------------------------------------
----------------------------------------------------------------
VII. Backup Azure VM using Azure Backup
----------------------------------------------------------------
----------------------------------------------------------------

Hands-on experience with configuring Azure Backup for VMs.
----------------------------------------------------------------
----------------------------------------------------------------
Creating backup policies and schedules.
----------------------------------------------------------------
----------------------------------------------------------------
Performing on-demand backups.
----------------------------------------------------------------
----------------------------------------------------------------
Restoring a VM from a backup."
----------------------------------------------------------------
----------------------------------------------------------------
"Understanding DevOps Principles & Culture
----------------------------------------------------------------
----------------------------------------------------------------
DevOps vs Traditional SDLC
----------------------------------------------------------------
----------------------------------------------------------------
Site Reliability Engineering
----------------------------------------------------------------
----------------------------------------------------------------
Key DevOps Metrics and KPIs
----------------------------------------------------------------
----------------------------------------------------------------
Walk through of various technologies in Azure Devops (or Devops in general)"
----------------------------------------------------------------
----------------------------------------------------------------
"Git Workflow (Branching, Merging, Pull Requests)
----------------------------------------------------------------
----------------------------------------------------------------
Managing Git Repositories in Azure Repos
----------------------------------------------------------------
----------------------------------------------------------------
Git Hooks & Code Policies
----------------------------------------------------------------
----------------------------------------------------------------
"
"I. Discovering Branch Strategies
----------------------------------------------------------------
----------------------------------------------------------------

Understanding the importance of branching strategies
----------------------------------------------------------------
----------------------------------------------------------------
Common branching strategies:
----------------------------------------------------------------
----------------------------------------------------------------
Main/Trunk-based development
----------------------------------------------------------------
----------------------------------------------------------------
Gitflow
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
GitHub Flow
----------------------------------------------------------------
----------------------------------------------------------------
Feature Branching
----------------------------------------------------------------
----------------------------------------------------------------
Choosing the right branching strategy for your team and project
----------------------------------------------------------------
----------------------------------------------------------------
II. Branch Policies in Azure Repos

Introduction to Branch Policies
----------------------------------------------------------------
----------------------------------------------------------------
Purpose and benefits of using branch policies
----------------------------------------------------------------
----------------------------------------------------------------
Configuring branch policies
----------------------------------------------------------------
----------------------------------------------------------------
Applying policies to specific branches
----------------------------------------------------------------
----------------------------------------------------------------
Types of Branch Policies:
Require a minimum number of reviewers
Require a successful build
Require all comments to be resolved
Limit merge types
Automatically include reviewers
Prevent committers' changes
Require linked work items
Static Code Analysis (integration with Azure Pipelines)
Code Reviews (integration with pull requests)
Managing and overriding branch policies
Branch permissions and their relation to policies
III. Pull Request Workflow

Introduction to Pull Requests (PRs)
Purpose and benefits of using pull requests
Creating a new pull request
Viewing and managing pull requests
Working with Pull Requests:
Adding and removing reviewers
Commenting on code changes
Suggesting edits within a pull request
Updating a pull request with new commits
Merging a pull request
Abandoning a pull request
Customizing the pull request experience
IV. Pull Request with Work Items

Linking Work Items to Pull Requests
Benefits of linking work items
Automatically linking work items based on branch names or commit messages
Manually linking existing work items to a pull request
Branch Policies Requiring Linked Work Items
Configuring the ""Require linked work items"" policy
Ensuring traceability between code changes and planned work
Updating Work Item Status Based on Pull Request Activity
Automatically transitioning work item states upon successful merge
V. Code Reviews

Integrating Code Reviews into the Pull Request Workflow
The role of code reviews in maintaining code quality
Requesting and assigning reviewers in a pull request
Performing Code Reviews in Azure Repos
Navigating code changes
Adding inline comments
Voting on a pull request (Approve, Approve with suggestions, Wait, Reject)
Responding to comments and suggestions
Branch Policies Related to Code Reviews
""Require a minimum number of reviewers"" policy
""Require all comments to be resolved"" policy
Best practices for effective code reviews
VI. Static Code Analysis

Integrating Static Code Analysis into Azure Repos
Benefits of using static code analysis
Setting up static code analysis tools in Azure Pipelines
Running Static Code Analysis as Part of a Pull Request
Configuring a build pipeline to run static analysis on pull request branches
Viewing static analysis results within the pull request
Branch Policies for Static Code Analysis
""Require a successful build"" policy (which includes static analysis)
Potentially using custom tasks to directly enforce static analysis rules as branch policies
Addressing and resolving static analysis findings"
"I. Introduction to Integration of Source Control with Tools

Understanding the benefits of integrating source control with other development and operations tools.
Overview of common integration scenarios:
Identity and Access Management (IAM)
Infrastructure as Code (IaC) and Configuration Management
Collaboration and Communication Platforms
Release Management and Automation
Key concepts and protocols enabling integration (e.g., OAuth, Webhooks, APIs).
II. GitHub and Azure AD Integration

Understanding the need for centralized identity management across GitHub and Azure.
Benefits of integrating GitHub with Azure Active Directory (Azure AD):
Single Sign-On (SSO) for GitHub Enterprise Cloud.
Centralized user and group management in Azure AD.
Conditional Access policies for GitHub resources.
Enhanced security and compliance.
Configuring GitHub Enterprise Cloud with Azure AD as an Identity Provider (IdP):
Setting up SAML authentication in GitHub Enterprise Cloud.
Configuring Enterprise Applications for GitHub in Azure AD.
Mapping Azure AD users and groups to GitHub organizations and teams.
Managing access and permissions in GitHub through Azure AD groups.
III. Introduction to GitOps

Understanding the principles of GitOps:
Infrastructure as Code (IaC) stored in Git.
Declarative configuration.
Automation of changes through Git workflows.
Continuous reconciliation.
Benefits of adopting GitOps:
Increased stability and reliability.
Improved auditability and version control for infrastructure.
Faster deployment and rollback processes.
Enhanced security through Git's inherent controls.
Key components and tools in the GitOps ecosystem:
Git repositories (as the single source of truth).
Declarative configuration languages (e.g., Kubernetes manifests, Terraform, Ansible).
Automation agents and controllers (e.g., Flux, Argo CD).
CI/CD pipelines triggering GitOps workflows.
Basic GitOps workflow: making changes, creating pull requests, automated deployment.
IV. Introduction to ChatOps

Understanding the concept of ChatOps:
Bringing development and operations tools into chat platforms.
Executing commands and receiving notifications directly within chat.
Improving collaboration and visibility.
Benefits of implementing ChatOps:
Streamlined workflows and reduced context switching.
Real-time collaboration and incident response.
Increased transparency and shared understanding.
Automation of routine tasks.
Common ChatOps platforms (e.g., Slack, Microsoft Teams).
Integrating source control (e.g., GitHub, Azure Repos) with chat platforms:
Receiving notifications for pull requests, commits, and branch activity.
Triggering CI/CD pipelines or other actions from chat commands.
Using slash commands to interact with source control information.
Examples of ChatOps workflows involving source control.
V. Using Changelogs

Understanding the purpose and benefits of maintaining a Changelog:
Communicating changes to users and stakeholders.
Providing a clear history of modifications.
Facilitating release notes generation.
Improving project transparency.
Best practices for writing effective Changelogs:
Following a consistent format (e.g., Keep a Changelog).
Grouping changes by type (e.g., Added, Changed, Fixed, Removed).
Writing clear and concise descriptions.
Including relevant information (e.g., pull request links, issue numbers).
Integrating Changelog management with source control workflows:
Updating the Changelog during feature development.
Automating Changelog generation based on commit messages or pull request metadata.
Storing the Changelog in the repository (e.g., CHANGELOG.md)."
"
I. Introduction to Package Management Strategy

Importance of a robust package management strategy.
Key considerations: dependency management, versioning, sharing, security, integration with pipelines, choosing the right tools.
II. Package Management Tools

Overview of popular tools (.NET: NuGet; Java: Maven, Gradle; Python: pip; Node.js: npm, Yarn; Containers: Docker Registry, ACR; Universal: Azure Artifacts, Artifactory, Nexus).
Core functionalities: package creation, publishing, consumption, dependency resolution, repositories, configuration, authentication.

III. Azure Artifacts

What Azure Artifacts is and its benefits within Azure DevOps.
Supported package types.
Feeds: Creation, management, permissions, upstream sources, feed views.
Publishing Packages: Using CLIs (NuGet, npm, Maven, Azure) to publish.
Consuming Packages: Configuring sources, authentication in build pipelines and local environments.
Universal Packages: Storing and managing generic files.
Docker Registry: Using Azure Artifacts for private Docker images.
Integration with Azure Pipelines: How Artifacts are used in build and release processes.

IV. Versioning Strategy for Artifacts

Understanding the necessity of artifact versioning.
Common Versioning Schemes: Semantic Versioning (SemVer), Calendar Versioning (CalVer), custom schemes.
Considerations for Choosing a Strategy: Artifact type, release frequency, backward compatibility, consumer expectations.
Implementing Versioning with Package Management Tools: Versioning during creation, specifying ranges during consumption, managing pre-releases, handling breaking changes.
Integrating Versioning with Build and Release Pipelines: Automating generation, tagging releases, updating manifests."
"I. Introduction to Build Automation

Understanding the principles and benefits of build automation.
The role of build automation in Continuous Integration (CI).
Key stages of a typical build process.
Overview of Azure Pipelines as a build automation tool.

Create an CI pipeline for a sample project from source code to integrating with Azure Artifacts.
Create another CD pipeline which would run through multiple deployments and validations before getting deployed to production.

II. Integrate External Services with Azure Pipelines

Understanding the need for integrating external services.
Common integration scenarios:
Secrets management (Azure Key Vault, HashiCorp Vault).
Artifact repositories (Azure Artifacts, JFrog Artifactory, Sonatype Nexus).
Notification systems (Slack, Microsoft Teams).
Issue tracking systems (Jira, Azure Boards).
Cloud platforms (AWS, GCP).

Using Service Connections in Azure DevOps:
Creating and managing service connections.
Different types of service connections (Azure Resource Manager, GitHub, Generic, etc.).
Securely accessing external resources.
Utilizing tasks and extensions for specific service integrations.

III. Visual Studio Marketplace

Introduction to the Visual Studio Marketplace.
Exploring available extensions for Azure Pipelines:
Build tasks.
Test frameworks.
Deployment tools.
Utility tasks.
Integrations with external services.
Finding and installing extensions in your Azure DevOps organization.
Understanding extension permissions and security considerations.
Contributing to the Visual Studio Marketplace (brief overview).

IV. Testing Strategy in the Builds

Importance of integrating testing into the build process.
Different levels and types of testing to include:
Unit tests.
Integration tests.
Static code analysis.
Security scanning.
Performance tests (brief introduction).
Configuring test tasks in Azure Pipelines:
Running unit tests with specific frameworks (.NET, Java, Python, etc.).
Publishing test results.
Analyzing test failures and trends.
Failing the build based on test results.

V. Code Coverage Concepts

Understanding code coverage and its significance in software quality.
Different types of code coverage metrics (e.g., line coverage, branch coverage).
Tools for generating code coverage reports for various languages and frameworks.
Integrating code coverage analysis into Azure Pipelines:
Configuring tasks to collect code coverage data.
Publishing code coverage reports.
Setting thresholds for code coverage and failing the build if not met.
Interpreting code coverage reports and identifying areas for improvement.

VI. GitHub Actions to Run a Release in Azure DevOps

Understanding the coexistence of GitHub Actions and Azure DevOps Pipelines.
Scenarios for triggering Azure DevOps Releases from GitHub Actions.
Setting up a Service Connection from GitHub to Azure DevOps.
Using GitHub Actions workflows to trigger Azure DevOps Pipelines (specifically Release Pipelines).
Passing parameters and artifacts between GitHub Actions and Azure DevOps.


VII. Pipeline Health Monitoring

Understanding the importance of pipeline health.
Key metrics for monitoring pipeline health:
Success rate.
Failure rate.
Duration.
Frequency of failures.
Error patterns.
Utilizing Azure Pipelines analytics:
Pipeline summary views.
Failure analysis reports.
Trend charts for key metrics.
Setting up alerts and notifications for pipeline failures and anomalies.
Using dashboards to visualize pipeline health.

VIII. Build Performance Optimization

Identifying factors affecting build performance:
Source code retrieval time.
Dependency resolution time.
Compilation time.
Test execution time.
Artifact publishing time.
Agent availability and performance.
Strategies for optimizing build performance:
Caching (dependencies, build outputs).
Parallel execution of jobs and tasks.
Selecting appropriate agent types and sizes.
Optimizing test execution (selective testing, parallel testing).
Efficient artifact management.
Utilizing build insights and logs for analysis."
"IaC with Azure services

I. Introduction to Deployment Scripts, Templates, and Pipeline Automation

Understanding the importance of automated deployments.
Benefits of using deployment scripts and Infrastructure as Code (IaC).
The role of pipelines in automating deployments.
Key concepts: idempotency, declarative vs. imperative deployments.

II. Deployment Solution Options

Overview of various deployment solution options in Azure:
Azure Resource Manager (ARM) templates.
Biceps
Azure CLI.
PowerShell.

III. Infrastructure as Code - Comparing ARM vs. Terraform

Understanding ARM templates:
JSON-based declarative syntax.
Native integration with Azure.
Resource dependencies and parameterization.
Understanding Terraform:
HashiCorp Configuration Language (HCL).
Multi-cloud support.
State management.
Providers and modules.
Comparing ARM and Terraform:
Syntax and ease of use.
Azure integration and feature support.
Ecosystem and community.
State management and planning.

IV. Infrastructure as Code - PowerShell vs. Azure CLI

Understanding PowerShell for Azure:
Cmdlets for managing Azure resources.
Scripting capabilities.
Object-oriented output.
Understanding Azure CLI:
Cross-platform command-line tool.
JSON-based output.
Scripting capabilities.
Comparing PowerShell and Azure CLI:
Syntax and scripting paradigms.
Platform compatibility.
Use cases and best practices.

V. Linting ARM Templates

Understanding the importance of linting ARM templates.
Tools for linting ARM templates (e.g., ARM Template Toolkit, Azure CLI).
Configuring linting rules and best practices.
Integrating linting into CI/CD pipelines.

VI. Deploying Databases through Automation

Automating database deployments in Azure:
Azure SQL Database.
Azure Cosmos DB.
Azure Database for PostgreSQL/MySQL.
Using deployment scripts and IaC for database deployments.
Managing database schemas and data migrations.
VII. SQL Data Movement

Understanding data movement requirements in Azure SQL.
Tools and techniques for SQL data movement:
Azure Data Factory (ADF).
SQL Server Integration Services (SSIS).
Azure SQL Database Import/Export.
BCP utility.
Automating data movement processes.

IX. Understanding CDN

Introduction to Azure Content Delivery Network (CDN):
Caching and content delivery.
CDN profiles and endpoints.
Integration with Azure services.

X. Azure Stacks

Understanding Azure Stack Hub, Edge, and HCI.
Deployment scenarios for Azure Stack.
Managing hybrid cloud deployments with Azure Stack.

XI. Sovereign Cloud Deployments

Understanding sovereign cloud environments (e.g., Azure Government, Azure China).
Considerations for deploying applications in sovereign clouds.
Compliance and security requirements.

XII. Linting ARM Templates with Azure Pipelines

Integrating ARM template linting into Azure Pipelines.
Using tasks and scripts to run linting tools.
Failing the pipeline on linting errors.

XIII. Build Infra with Azure Pipelines Practice

Using Azure Pipelines to build and deploy infrastructure resources.
Implementing IaC deployments in pipelines.
Managing infrastructure state and dependencies.

XIV. Deploying Python Apps in AKS Cluster Using Pipelines

Containerizing Python applications.
Building and pushing Docker images to Azure Container Registry (ACR).
Deploying Python applications to Azure Kubernetes Service (AKS) using Helm or YAML manifests.
Automating AKS deployments with Azure Pipelines."
"I. Release Strategies for AKS

Understanding Release Strategies
Blue/Green Deployments in AKS
Canary Releases in AKS
Rolling Deployments in AKS
Feature Flags for AKS
A/B Testing in AKS
Choosing the Right Strategy for AKS
Implementing in Azure Pipelines for AKS
II. Stages, Dependencies, and Conditions for AKS Deployments

Role of Stages in Azure Pipelines for AKS
Defining Dependencies Between Stages for AKS
Using Conditions for Stage Execution in AKS
Complex Deployment Workflows for AKS
III. Azure App Configuration for AKS Deployments

Introduction to Azure App Configuration
Managing Settings and Feature Flags for AKS
Integrating with Azure Pipelines for AKS
Dynamic Configuration of AKS Deployments
IV. Deployment Slot Releases for AKS (Simulated)

Concept of Deployment Slots in AKS
Benefits for Zero-Downtime in AKS
Configuring ""Slots"" in AKS
Implementing ""Slot Swaps"" in AKS
Managing ""Slot"" Configurations in AKS
V. Load Balancer and Traffic Manager Releases for AKS

Understanding Azure Load Balancer and Traffic Manager with AKS
Load Balancing for AKS High Availability
Traffic Manager for Global AKS Routing
Integrating with AKS Deployment Pipelines
Controlled Releases via Traffic Routing with AKS
VI. Release Gates for AKS Deployments

Purpose and Benefits of Release Gates for AKS
Pre-deployment and Post-deployment Gates for AKS
Using Built-in Gates for AKS
Creating Custom Gates for AKS
Automated Quality Checks and Approvals for AKS
VII. Multi-Stage Build in Azure Pipelines to Deploy a Web App to AKS

Multi-Stage YAML Pipeline for AKS Web App
Build, Test, and Deployment Stages for AKS
Using Deployment Jobs for AKS
Environment-Specific Configurations for AKS
Automating the Deployment Process to AKS"
"I. Introduction to Security and Compliance

Understanding the importance of security and compliance in software development.
Security best practices in CI/CD pipelines.
Compliance requirements and standards (e.g., GDPR, HIPAA, PCI DSS).
Integrating security and compliance checks into the development lifecycle.
II. Dependency Scanning

Understanding the risks associated with vulnerable dependencies.
Tools for dependency scanning (e.g., OWASP Dependency-Check, Snyk).
Integrating dependency scanning into Azure Pipelines.
Analyzing dependency scan results and addressing vulnerabilities.

III. Container Dependency Scanning

Understanding the security risks in container images.
Tools for container dependency scanning (e.g., Trivy, Clair).
Integrating container dependency scanning into container build pipelines.
Addressing vulnerabilities in container base images and application dependencies.

IV. Security Incorporation in Pipelines

Integrating security testing into CI/CD pipelines.
Static Application Security Testing (SAST).
Dynamic Application Security Testing (DAST).
Software Composition Analysis (SCA).
Security1 scanning tools and tasks in Azure Pipelines.
1.
www.forrester.com

V. Compliance Tests with SonarQube and WhiteSource Bolt

Introduction to SonarQube for code quality and security analysis.
Introduction to WhiteSource Bolt for open-source component security.
Integrating SonarQube and WhiteSource Bolt into Azure Pipelines.
Configuring compliance rules and quality gates.
Analyzing compliance reports and addressing issues.

Overview of Defense at depth in an AKS cluster
- Securing images
- Securing containers
- Securing machines/nodes
- Securing network
- Securing peripherals"
". Azure Policy Understanding

Introduction to Azure Policy.
Understanding Policy Definitions and Initiatives.
Policy Assignment and Scope.
Policy Evaluation and Compliance.
Remediation Tasks and Compliance Reporting.
Using Azure Policy for Governance and Compliance.

"
"I. . Fundamentals of Monitoring in Azure

Understanding the Importance of Monitoring in Azure: Proactive issue identification, performance analysis, security auditing, compliance, cost optimization.
Overview of Azure Monitor and its Components: Metrics, Logs, Activity Logs, Alerts, Action Groups, Dashboards, Insights, Service Health.
Different Types of Monitoring Data:
Metrics: Numerical values measured over time.
Logs: Time-stamped records of events.
Activity Logs: Subscription-level operational events.
Key Concepts:
Workspaces (Log Analytics): Centralized data repository.
Alerts: Proactive notifications based on data.
Action Groups: Configurable notification mechanisms.
Dashboards: Visualizations for monitoring data.
Best Practices for Monitoring Azure Resources: Define key metrics, implement alerting, use dashboards, optimize costs, secure monitoring data.

II. Activity Logs

Understanding the Purpose of Activity Logs: Auditing resource changes, tracking operations.
Viewing and Filtering Activity Logs in the Azure Portal.
Querying Activity Logs using Azure CLI and PowerShell.
Exporting Activity Logs to Log Analytics Workspace or Storage Account for long-term retention and analysis.
Using Activity Logs for Auditing and Compliance Reporting.

III. Alerts and Action Groups

Understanding the Purpose of Alerts in Azure Monitor: Proactive notification of issues.
Creating Metric Alerts and Log Alerts: Configuring rules based on thresholds and query results.
Configuring Alert Conditions and Thresholds: Defining when alerts should trigger.
Understanding Action Groups and their Purpose: Defining responses to alerts.
Configuring Action Groups for Email, SMS, Webhook, Logic Apps, and other notifications.
Managing and Troubleshooting Alerts.

IV. Monitoring Service Health

Understanding Azure Service Health: Visibility into Azure service incidents and planned maintenance.
Viewing Service Health Alerts and Planned Maintenance in the Azure Portal.
Configuring Personalized Service Health Alerts: Receiving notifications for services impacting your resources.
Using Service Health for Proactive Monitoring of Azure Services.

V. Monitoring Costs

Understanding Azure Monitor Costs: Ingestion, retention, and query costs for Log Analytics; metric costs.
Analyzing Monitoring Data Usage and Costs in Azure Cost Management.
Optimizing Monitoring Costs through Data Retention Policies, Filtering, and Resource-Specific Configurations.
Using Cost Management Tools to Track Monitoring Expenses.

VI. Log Analytics Workspace

Understanding Log Analytics Workspaces and their Purpose: Centralized platform for log data.
Configuring Data Sources for Log Analytics: Azure services, custom logs, agents.
Querying Logs using Kusto Query Language (KQL): Syntax, operators, functions for in-depth analysis.
Creating Visualizations and Dashboards in Log Analytics: Building custom views of log data.
Using Log Analytics for Troubleshooting, Root Cause Analysis, and Trend Identification.

VII. Monitoring Insights

Understanding Azure Monitor Insights for Specific Services: Pre-built monitoring experiences.
Using Application Insights for Monitoring Web Applications: Performance, availability, usage, errors, traces.
Using Container Insights for Monitoring AKS Clusters: Node and pod health, resource utilization, logs.
Exploring Other Insights Offerings: SQL Insights, Network Insights, VM Insights, etc.

VIII. Monitoring Security

Understanding the Role of Azure Monitor in Security Monitoring: Centralized security data collection and analysis.
Integrating Azure Security Center and Azure Sentinel with Azure Monitor: Feeding security data into Log Analytics.
Using Azure Monitor for Threat Detection and Security Analysis: KQL queries for identifying malicious activity.
Configuring Security Alerts and Notifications.

IX. Azure AD Connect Health

Understanding the Purpose of Azure AD Connect Health: Monitoring the health and performance of your on-premises AD sync infrastructure.
Installing and Configuring Azure AD Connect Health Agents on your sync servers.
Monitoring Azure AD Connect Synchronization Status and Health: Identifying sync errors and latency.
Using Azure AD Connect Health for Troubleshooting and Reporting on your hybrid identity infrastructure.

X. Monitoring Containers with Azure Monitor

Understanding the Challenges of Monitoring Containerized Applications.
Key Metrics for Container Monitoring.
Monitoring Containers with Azure Monitor for containers:
Enabling Azure Monitor for AKS.
Viewing Container Logs, Metrics, and Events.
Querying Container Data with KQL.
Monitoring Containers with Prometheus and Grafana on Azure (Overview).
Best Practices for Container Monitoring.

XI. Integration of Azure Monitoring with Third-Party APM Tools

Understanding the Value of Integrating Azure Monitor with Third-Party APM Tools.
Integrating Azure Monitor metrics with Dynatrace.
Integrating Azure Monitor metrics with New Relic.
Use Cases for Hybrid Monitoring Solutions.

XII. Monitoring Feedback Loops

Understanding the Concept of Monitoring Feedback Loops.
Implementing Feedback Loops to Improve Application Performance and Reliability.
Gathering User Feedback and Integrating it with Monitoring Data.
Automating Actions Based on Monitoring Data and Feedback.
Examples of Monitoring Feedback Loops."
"I. Monitoring Containers

Understanding the challenges of monitoring containerized applications.
Key metrics for container monitoring (CPU, memory, network, disk).
Monitoring containers with Azure Monitor for containers:
Enabling Azure Monitor for AKS.
Viewing container logs, metrics, and events.
Querying container data with KQL.
Monitoring containers with Prometheus and Grafana on Azure.
Best practices for container monitoring.
II. Integration of Azure Monitoring with New Relic

Understanding the value of integrating Azure Monitor with third-party APM tools.
Integrating Azure Monitor metrics with Dynatrace:
Setting up the Dynatrace Azure integration.
Viewing Azure metrics in Dynatrace dashboards.
Integrating Azure Monitor metrics with New Relic:
Setting up the New Relic Azure integration.
Viewing Azure metrics in New Relic dashboards.
Use cases for hybrid monitoring solutions."
". Visualizing Deployment and Release Status with Azure DevOps Dashboards

Understanding the role of dashboards in communicating deployment and release status.
Creating and customizing Azure DevOps dashboards.
Adding widgets to visualize key metrics:
Pipeline status.
Test results.
Work item progress.
Deployment status.
Custom charts and graphs.
Sharing dashboards with stakeholders.
II. Leveraging Team Analytics for Continuous Improvement

Leveraging Azure DevOps Analytics views for insights into team performance and release cadence.
Creating charts and reports on:
Lead time and cycle time.
Deployment frequency.
Failure rates and recovery times.
Communicating analytics insights to the team and stakeholders through dashboards and reports.
Using analytics to drive improvements in deployment and release processes.
III. Cost-Effective Communication Strategies in DevOps

Understanding the costs associated with communication tools and strategies.
Utilizing built-in communication features in Azure DevOps (e.g., notifications, discussions).
Evaluating the cost-effectiveness of external communication tools (e.g., Slack, Microsoft Teams).
Optimizing communication channels to minimize costs while maintaining effectiveness.
IV. Integrating Work Items with Deployments for Traceability

Linking work items (User Stories, Bugs, Tasks) to deployments and releases.
Tracking the deployment status of specific work items.
Automatically updating work item status based on deployment outcomes.
Providing traceability from requirements to deployed code.
Using deployment history to understand the impact of releases on work items.
V. Streamlining Development with GitHub and Azure Boards Integration

Understanding the integration capabilities between GitHub and Azure Boards.
Connecting GitHub repositories to Azure Boards projects.
Linking GitHub commits, pull requests, and issues to Azure Boards work items.
Synchronizing status and information between the two platforms.
Streamlining the development workflow across code and project management.
VI. Hands-on Scrum Project Management with Azure Boards

Creating a Scrum project in Azure Boards.
Defining Epics, Features, and User Stories to represent product backlog.
Planning sprints and assigning work to team members.
Tracking sprint progress using the Sprint Board.
Managing the product backlog and prioritizing work.
Using queries and views to monitor project status.
VII. Automating Communication in DevOps Workflows

Understanding the benefits of automating communication in DevOps workflows.
Key scenarios for communication automation:
Pipeline status updates.
Deployment notifications.
Work item state changes.
Approvals and feedback requests.
Security alerts.
Choosing the right communication platforms and automation tools.
VIII. Leveraging Microsoft Teams for Communication Automation

Integrating Azure DevOps with Microsoft Teams.
Configuring Teams connectors for Azure DevOps:
Pipeline notifications.
Work item notifications.
Pull Request notifications.
Using Azure Logic Apps or Power Automate for custom Teams notifications.
Leveraging Teams bots for interactive communication with Azure DevOps.
IX. Leveraging Slack for Communication Automation

Integrating Azure DevOps with Slack.
Configuring Slack app for Azure DevOps:
Pipeline notifications.
Work item notifications.
Pull Request notifications.
Using Azure Logic Apps or custom scripts for advanced Slack notifications.
Leveraging Slack bots for interacting with Azure DevOps.
X. Enabling Mobile Approvals for GitHub Requests

Understanding the need for mobile access to approvals.
Using the GitHub mobile app for reviewing and approving pull requests.
Leveraging Azure DevOps mobile app for managing approvals (if integrated with GitHub PR checks).
Best practices for mobile-based approvals."
". Onboarding Team Members

Importance of comprehensive onboarding documentation for DevOps processes.
Key areas to document for new team members:
Azure DevOps organization and project structure.
Source control workflows (branching, merging, pull requests).
Build and release pipeline definitions and purpose.
Testing strategies and tools.
Deployment procedures and environments.
Monitoring and alerting setup.
Communication channels and escalation paths.
Access control and permissions.
Team conventions and best practices.
Creating effective onboarding documentation (e.g., wikis, README files, onboarding guides).

II. Azure DevOps Dependency Tracking

Understanding the need for dependency tracking in software development.
Utilizing Azure Boards to track dependencies between work items (e.g., User Stories, Tasks, Bugs).
Creating and visualizing dependency links.
Identifying and managing risks associated with dependencies.
Using dependency tracking to plan and prioritize work.

III. Azure Artifacts Versioning and Release Notes

Documenting versioning strategies for packages in Azure Artifacts (e.g., Semantic Versioning).
Implementing versioning during package publishing.
Generating release notes based on version changes and associated work items.
Utilizing Azure Pipelines to automate release note generation.
Communicating artifact versions and release notes to stakeholders."
